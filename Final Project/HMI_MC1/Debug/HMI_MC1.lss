
HMI_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000329c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00800060  0000329c  00003330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008000f8  008000f8  000033c8  2**0
                  ALLOC
  3 .stab         00002e8c  00000000  00000000  000033c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001175  00000000  00000000  00006254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000073c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007509  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007679  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000092c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000af5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b349  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bb17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 55 11 	call	0x22aa	; 0x22aa <main>
      8a:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ee       	ldi	r26, 0xE4	; 228
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 ee       	ldi	r24, 0xE4	; 228
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER0_OVF>:

/**********************GLOBAL VARIABLES*******************************/
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

/***********************INTERRUPT SERVICE ROUTINE***********************/
ISR(TIMER0_OVF) {
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
     b70:	80 91 f8 00 	lds	r24, 0x00F8
     b74:	90 91 f9 00 	lds	r25, 0x00F9
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <TIMER0_OVF+0x40>
		/* Call the Call Back function  */
		(*g_callBackPtr)();
     b7c:	e0 91 f8 00 	lds	r30, 0x00F8
     b80:	f0 91 f9 00 	lds	r31, 0x00F9
     b84:	09 95       	icall
	}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <TIMER0_COMP>:

ISR(TIMER0_COMP) {
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
     bd6:	80 91 f8 00 	lds	r24, 0x00F8
     bda:	90 91 f9 00 	lds	r25, 0x00F9
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <TIMER0_COMP+0x40>
		/* Call the Call Back function */
		(*g_callBackPtr)();
     be2:	e0 91 f8 00 	lds	r30, 0x00F8
     be6:	f0 91 f9 00 	lds	r31, 0x00F9
     bea:	09 95       	icall
	}
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <Timer0_init>:

/**********************FUNCTIONS DECLARATION***************************/

void Timer0_init(const Timer_config *Config_Ptr) {
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <Timer0_init+0x6>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	/*************Timer0 Initialization**************/

	if (Config_Ptr->mode == NORMAL || Config_Ptr->mode == CTC) {
     c20:	e9 81       	ldd	r30, Y+1	; 0x01
     c22:	fa 81       	ldd	r31, Y+2	; 0x02
     c24:	80 81       	ld	r24, Z
     c26:	88 23       	and	r24, r24
     c28:	29 f0       	breq	.+10     	; 0xc34 <Timer0_init+0x22>
     c2a:	e9 81       	ldd	r30, Y+1	; 0x01
     c2c:	fa 81       	ldd	r31, Y+2	; 0x02
     c2e:	80 81       	ld	r24, Z
     c30:	82 30       	cpi	r24, 0x02	; 2
     c32:	41 f4       	brne	.+16     	; 0xc44 <Timer0_init+0x32>
		SET_BIT(TCCR0, FOC0);
     c34:	a3 e5       	ldi	r26, 0x53	; 83
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e3 e5       	ldi	r30, 0x53	; 83
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	80 68       	ori	r24, 0x80	; 128
     c40:	8c 93       	st	X, r24
     c42:	07 c0       	rjmp	.+14     	; 0xc52 <Timer0_init+0x40>
	} else {
		CLEAR_BIT(TCCR0, FOC0);
     c44:	a3 e5       	ldi	r26, 0x53	; 83
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e3 e5       	ldi	r30, 0x53	; 83
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	8f 77       	andi	r24, 0x7F	; 127
     c50:	8c 93       	st	X, r24
	}
	/* Choose the mode according to the config struct*/
	TCCR0 = (TCCR0 & 0xF7) | (((Config_Ptr->mode) & 0b10) << 2);
     c52:	a3 e5       	ldi	r26, 0x53	; 83
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e3 e5       	ldi	r30, 0x53	; 83
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	28 2f       	mov	r18, r24
     c5e:	27 7f       	andi	r18, 0xF7	; 247
     c60:	e9 81       	ldd	r30, Y+1	; 0x01
     c62:	fa 81       	ldd	r31, Y+2	; 0x02
     c64:	80 81       	ld	r24, Z
     c66:	88 2f       	mov	r24, r24
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	82 70       	andi	r24, 0x02	; 2
     c6c:	90 70       	andi	r25, 0x00	; 0
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	82 2b       	or	r24, r18
     c78:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xBF) | (((Config_Ptr->mode) & 0b01) << 6);
     c7a:	a3 e5       	ldi	r26, 0x53	; 83
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e3 e5       	ldi	r30, 0x53	; 83
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	28 2f       	mov	r18, r24
     c86:	2f 7b       	andi	r18, 0xBF	; 191
     c88:	e9 81       	ldd	r30, Y+1	; 0x01
     c8a:	fa 81       	ldd	r31, Y+2	; 0x02
     c8c:	80 81       	ld	r24, Z
     c8e:	88 2f       	mov	r24, r24
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	81 70       	andi	r24, 0x01	; 1
     c94:	90 70       	andi	r25, 0x00	; 0
     c96:	00 24       	eor	r0, r0
     c98:	96 95       	lsr	r25
     c9a:	87 95       	ror	r24
     c9c:	07 94       	ror	r0
     c9e:	96 95       	lsr	r25
     ca0:	87 95       	ror	r24
     ca2:	07 94       	ror	r0
     ca4:	98 2f       	mov	r25, r24
     ca6:	80 2d       	mov	r24, r0
     ca8:	82 2b       	or	r24, r18
     caa:	8c 93       	st	X, r24

	/* Choose the prescaler according to the config struct */
	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler);
     cac:	a3 e5       	ldi	r26, 0x53	; 83
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e3 e5       	ldi	r30, 0x53	; 83
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	98 2f       	mov	r25, r24
     cb8:	98 7f       	andi	r25, 0xF8	; 248
     cba:	e9 81       	ldd	r30, Y+1	; 0x01
     cbc:	fa 81       	ldd	r31, Y+2	; 0x02
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
     cc0:	89 2b       	or	r24, r25
     cc2:	8c 93       	st	X, r24

	/* Select the initial value*/
	TCNT0 = Config_Ptr->Initial_value;
     cc4:	a2 e5       	ldi	r26, 0x52	; 82
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e9 81       	ldd	r30, Y+1	; 0x01
     cca:	fa 81       	ldd	r31, Y+2	; 0x02
     ccc:	82 81       	ldd	r24, Z+2	; 0x02
     cce:	8c 93       	st	X, r24

	/* Select compare value*/
	OCR0 = Config_Ptr->Compare_value;
     cd0:	ac e5       	ldi	r26, 0x5C	; 92
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e9 81       	ldd	r30, Y+1	; 0x01
     cd6:	fa 81       	ldd	r31, Y+2	; 0x02
     cd8:	83 81       	ldd	r24, Z+3	; 0x03
     cda:	94 81       	ldd	r25, Z+4	; 0x04
     cdc:	8c 93       	st	X, r24

	/* enable interrupt based on the mode */
	if (Config_Ptr->mode == NORMAL) {
     cde:	e9 81       	ldd	r30, Y+1	; 0x01
     ce0:	fa 81       	ldd	r31, Y+2	; 0x02
     ce2:	80 81       	ld	r24, Z
     ce4:	88 23       	and	r24, r24
     ce6:	41 f4       	brne	.+16     	; 0xcf8 <Timer0_init+0xe6>
		SET_BIT(TIMSK, TOIE0);
     ce8:	a9 e5       	ldi	r26, 0x59	; 89
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e9 e5       	ldi	r30, 0x59	; 89
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	81 60       	ori	r24, 0x01	; 1
     cf4:	8c 93       	st	X, r24
     cf6:	0c c0       	rjmp	.+24     	; 0xd10 <Timer0_init+0xfe>
	} else if (Config_Ptr->mode == CTC) {
     cf8:	e9 81       	ldd	r30, Y+1	; 0x01
     cfa:	fa 81       	ldd	r31, Y+2	; 0x02
     cfc:	80 81       	ld	r24, Z
     cfe:	82 30       	cpi	r24, 0x02	; 2
     d00:	39 f4       	brne	.+14     	; 0xd10 <Timer0_init+0xfe>
		SET_BIT(TIMSK, OCIE0);
     d02:	a9 e5       	ldi	r26, 0x59	; 89
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e9 e5       	ldi	r30, 0x59	; 89
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	82 60       	ori	r24, 0x02	; 2
     d0e:	8c 93       	st	X, r24

	}
}
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <Timer0_DeInit>:

void Timer0_DeInit(void) {
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	/***********Timer0 Deinitialization**********/

	TCCR0 = 0;
     d22:	e3 e5       	ldi	r30, 0x53	; 83
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	10 82       	st	Z, r1
	TCNT0 = 0;
     d28:	e2 e5       	ldi	r30, 0x52	; 82
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	10 82       	st	Z, r1
	OCR0 = 0;
     d2e:	ec e5       	ldi	r30, 0x5C	; 92
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	10 82       	st	Z, r1

	TIMSK &= 0xFC;
     d34:	a9 e5       	ldi	r26, 0x59	; 89
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e9 e5       	ldi	r30, 0x59	; 89
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8c 7f       	andi	r24, 0xFC	; 252
     d40:	8c 93       	st	X, r24

}
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <Timer0_Delay>:

void Timer0_Delay(uint8 seconds) {
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <Timer0_Delay+0x6>
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <Timer0_Delay+0x8>
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	8c 83       	std	Y+4, r24	; 0x04
	uint8 count;
	TCNT0 = 0; // Set Timer0 initial value to 0
     d56:	e2 e5       	ldi	r30, 0x52	; 82
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	10 82       	st	Z, r1
	OCR0 = 245;
     d5c:	ec e5       	ldi	r30, 0x5C	; 92
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	85 ef       	ldi	r24, 0xF5	; 245
     d62:	80 83       	st	Z, r24
	/* Configure the timer control register
	 * 1. Non PWM mode FOC0=1
	 * 2. Comp Mode WGM01=1 & WGM00=0
	 * 3. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1 << FOC0) | (1 << WGM01) | (1 << CS02) | (1 << CS00);
     d64:	e3 e5       	ldi	r30, 0x53	; 83
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	8d e8       	ldi	r24, 0x8D	; 141
     d6a:	80 83       	st	Z, r24

	for (int i = 0; i < seconds; i++) {
     d6c:	1a 82       	std	Y+2, r1	; 0x02
     d6e:	19 82       	std	Y+1, r1	; 0x01
     d70:	1d c0       	rjmp	.+58     	; 0xdac <Timer0_Delay+0x64>

		for (count = 0; count < 32; count++) { // to stay for 1 second
     d72:	1b 82       	std	Y+3, r1	; 0x03
     d74:	13 c0       	rjmp	.+38     	; 0xd9c <Timer0_Delay+0x54>

			while (!(TIFR & (1 << OCF0)))
     d76:	e8 e5       	ldi	r30, 0x58	; 88
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	82 70       	andi	r24, 0x02	; 2
     d82:	90 70       	andi	r25, 0x00	; 0
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	b9 f3       	breq	.-18     	; 0xd76 <Timer0_Delay+0x2e>
				; // Wait until the Timer0 Overflow occurs (wait until TOV0 = 1)

			TIFR |= (1 << OCF0); // Clear TOV0 bit by set its value
     d88:	a8 e5       	ldi	r26, 0x58	; 88
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e8 e5       	ldi	r30, 0x58	; 88
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	82 60       	ori	r24, 0x02	; 2
     d94:	8c 93       	st	X, r24
	 */
	TCCR0 = (1 << FOC0) | (1 << WGM01) | (1 << CS02) | (1 << CS00);

	for (int i = 0; i < seconds; i++) {

		for (count = 0; count < 32; count++) { // to stay for 1 second
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	8f 5f       	subi	r24, 0xFF	; 255
     d9a:	8b 83       	std	Y+3, r24	; 0x03
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	80 32       	cpi	r24, 0x20	; 32
     da0:	50 f3       	brcs	.-44     	; 0xd76 <Timer0_Delay+0x2e>
	 * 2. Comp Mode WGM01=1 & WGM00=0
	 * 3. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1 << FOC0) | (1 << WGM01) | (1 << CS02) | (1 << CS00);

	for (int i = 0; i < seconds; i++) {
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	9a 83       	std	Y+2, r25	; 0x02
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	8c 81       	ldd	r24, Y+4	; 0x04
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	82 17       	cp	r24, r18
     db8:	93 07       	cpc	r25, r19
     dba:	dc f2       	brlt	.-74     	; 0xd72 <Timer0_Delay+0x2a>

			TIFR |= (1 << OCF0); // Clear TOV0 bit by set its value

		}
	}
}
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <Timer0_setCallBack>:

void Timer0_setCallBack(void (*a_ptr)(void)) {
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <Timer0_setCallBack+0x6>
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	9a 83       	std	Y+2, r25	; 0x02
     dd6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	90 93 f9 00 	sts	0x00F9, r25
     de0:	80 93 f8 00 	sts	0x00F8, r24
}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <GPIO_setupPinDirection+0x6>
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <GPIO_setupPinDirection+0x8>
     df6:	0f 92       	push	r0
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	6a 83       	std	Y+2, r22	; 0x02
     e00:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	88 30       	cpi	r24, 0x08	; 8
     e06:	08 f0       	brcs	.+2      	; 0xe0a <GPIO_setupPinDirection+0x1c>
     e08:	d5 c0       	rjmp	.+426    	; 0xfb4 <GPIO_setupPinDirection+0x1c6>
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	84 30       	cpi	r24, 0x04	; 4
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <GPIO_setupPinDirection+0x24>
     e10:	d1 c0       	rjmp	.+418    	; 0xfb4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	3d 83       	std	Y+5, r19	; 0x05
     e1a:	2c 83       	std	Y+4, r18	; 0x04
     e1c:	8c 81       	ldd	r24, Y+4	; 0x04
     e1e:	9d 81       	ldd	r25, Y+5	; 0x05
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	91 05       	cpc	r25, r1
     e24:	09 f4       	brne	.+2      	; 0xe28 <GPIO_setupPinDirection+0x3a>
     e26:	43 c0       	rjmp	.+134    	; 0xeae <GPIO_setupPinDirection+0xc0>
     e28:	2c 81       	ldd	r18, Y+4	; 0x04
     e2a:	3d 81       	ldd	r19, Y+5	; 0x05
     e2c:	22 30       	cpi	r18, 0x02	; 2
     e2e:	31 05       	cpc	r19, r1
     e30:	2c f4       	brge	.+10     	; 0xe3c <GPIO_setupPinDirection+0x4e>
     e32:	8c 81       	ldd	r24, Y+4	; 0x04
     e34:	9d 81       	ldd	r25, Y+5	; 0x05
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	71 f0       	breq	.+28     	; 0xe56 <GPIO_setupPinDirection+0x68>
     e3a:	bc c0       	rjmp	.+376    	; 0xfb4 <GPIO_setupPinDirection+0x1c6>
     e3c:	2c 81       	ldd	r18, Y+4	; 0x04
     e3e:	3d 81       	ldd	r19, Y+5	; 0x05
     e40:	22 30       	cpi	r18, 0x02	; 2
     e42:	31 05       	cpc	r19, r1
     e44:	09 f4       	brne	.+2      	; 0xe48 <GPIO_setupPinDirection+0x5a>
     e46:	5f c0       	rjmp	.+190    	; 0xf06 <GPIO_setupPinDirection+0x118>
     e48:	8c 81       	ldd	r24, Y+4	; 0x04
     e4a:	9d 81       	ldd	r25, Y+5	; 0x05
     e4c:	83 30       	cpi	r24, 0x03	; 3
     e4e:	91 05       	cpc	r25, r1
     e50:	09 f4       	brne	.+2      	; 0xe54 <GPIO_setupPinDirection+0x66>
     e52:	85 c0       	rjmp	.+266    	; 0xf5e <GPIO_setupPinDirection+0x170>
     e54:	af c0       	rjmp	.+350    	; 0xfb4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	a1 f4       	brne	.+40     	; 0xe84 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     e5c:	aa e3       	ldi	r26, 0x3A	; 58
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	ea e3       	ldi	r30, 0x3A	; 58
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	48 2f       	mov	r20, r24
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	02 2e       	mov	r0, r18
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <GPIO_setupPinDirection+0x8c>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	0a 94       	dec	r0
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <GPIO_setupPinDirection+0x88>
     e7e:	84 2b       	or	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	98 c0       	rjmp	.+304    	; 0xfb4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e84:	aa e3       	ldi	r26, 0x3A	; 58
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	ea e3       	ldi	r30, 0x3A	; 58
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <GPIO_setupPinDirection+0xb4>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <GPIO_setupPinDirection+0xb0>
     ea6:	80 95       	com	r24
     ea8:	84 23       	and	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	83 c0       	rjmp	.+262    	; 0xfb4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	a1 f4       	brne	.+40     	; 0xedc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     eb4:	a7 e3       	ldi	r26, 0x37	; 55
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e7 e3       	ldi	r30, 0x37	; 55
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <GPIO_setupPinDirection+0xe4>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <GPIO_setupPinDirection+0xe0>
     ed6:	84 2b       	or	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	6c c0       	rjmp	.+216    	; 0xfb4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     edc:	a7 e3       	ldi	r26, 0x37	; 55
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e7 e3       	ldi	r30, 0x37	; 55
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <GPIO_setupPinDirection+0x10c>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <GPIO_setupPinDirection+0x108>
     efe:	80 95       	com	r24
     f00:	84 23       	and	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	57 c0       	rjmp	.+174    	; 0xfb4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	a1 f4       	brne	.+40     	; 0xf34 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f0c:	a4 e3       	ldi	r26, 0x34	; 52
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e4 e3       	ldi	r30, 0x34	; 52
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <GPIO_setupPinDirection+0x13c>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <GPIO_setupPinDirection+0x138>
     f2e:	84 2b       	or	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	40 c0       	rjmp	.+128    	; 0xfb4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f34:	a4 e3       	ldi	r26, 0x34	; 52
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e4 e3       	ldi	r30, 0x34	; 52
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <GPIO_setupPinDirection+0x164>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <GPIO_setupPinDirection+0x160>
     f56:	80 95       	com	r24
     f58:	84 23       	and	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	2b c0       	rjmp	.+86     	; 0xfb4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	a1 f4       	brne	.+40     	; 0xf8c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f64:	a1 e3       	ldi	r26, 0x31	; 49
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e1 e3       	ldi	r30, 0x31	; 49
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <GPIO_setupPinDirection+0x194>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <GPIO_setupPinDirection+0x190>
     f86:	84 2b       	or	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	14 c0       	rjmp	.+40     	; 0xfb4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f8c:	a1 e3       	ldi	r26, 0x31	; 49
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e1 e3       	ldi	r30, 0x31	; 49
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <GPIO_setupPinDirection+0x1bc>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <GPIO_setupPinDirection+0x1b8>
     fae:	80 95       	com	r24
     fb0:	84 23       	and	r24, r20
     fb2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	00 d0       	rcall	.+0      	; 0xfca <GPIO_writePin+0x6>
     fca:	00 d0       	rcall	.+0      	; 0xfcc <GPIO_writePin+0x8>
     fcc:	0f 92       	push	r0
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	6a 83       	std	Y+2, r22	; 0x02
     fd6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	88 30       	cpi	r24, 0x08	; 8
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <GPIO_writePin+0x1c>
     fde:	d5 c0       	rjmp	.+426    	; 0x118a <GPIO_writePin+0x1c6>
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	84 30       	cpi	r24, 0x04	; 4
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <GPIO_writePin+0x24>
     fe6:	d1 c0       	rjmp	.+418    	; 0x118a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	3d 83       	std	Y+5, r19	; 0x05
     ff0:	2c 83       	std	Y+4, r18	; 0x04
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	91 05       	cpc	r25, r1
     ffa:	09 f4       	brne	.+2      	; 0xffe <GPIO_writePin+0x3a>
     ffc:	43 c0       	rjmp	.+134    	; 0x1084 <GPIO_writePin+0xc0>
     ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    1000:	3d 81       	ldd	r19, Y+5	; 0x05
    1002:	22 30       	cpi	r18, 0x02	; 2
    1004:	31 05       	cpc	r19, r1
    1006:	2c f4       	brge	.+10     	; 0x1012 <GPIO_writePin+0x4e>
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	71 f0       	breq	.+28     	; 0x102c <GPIO_writePin+0x68>
    1010:	bc c0       	rjmp	.+376    	; 0x118a <GPIO_writePin+0x1c6>
    1012:	2c 81       	ldd	r18, Y+4	; 0x04
    1014:	3d 81       	ldd	r19, Y+5	; 0x05
    1016:	22 30       	cpi	r18, 0x02	; 2
    1018:	31 05       	cpc	r19, r1
    101a:	09 f4       	brne	.+2      	; 0x101e <GPIO_writePin+0x5a>
    101c:	5f c0       	rjmp	.+190    	; 0x10dc <GPIO_writePin+0x118>
    101e:	8c 81       	ldd	r24, Y+4	; 0x04
    1020:	9d 81       	ldd	r25, Y+5	; 0x05
    1022:	83 30       	cpi	r24, 0x03	; 3
    1024:	91 05       	cpc	r25, r1
    1026:	09 f4       	brne	.+2      	; 0x102a <GPIO_writePin+0x66>
    1028:	85 c0       	rjmp	.+266    	; 0x1134 <GPIO_writePin+0x170>
    102a:	af c0       	rjmp	.+350    	; 0x118a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	a1 f4       	brne	.+40     	; 0x105a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1032:	ab e3       	ldi	r26, 0x3B	; 59
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	eb e3       	ldi	r30, 0x3B	; 59
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <GPIO_writePin+0x8c>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <GPIO_writePin+0x88>
    1054:	84 2b       	or	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	98 c0       	rjmp	.+304    	; 0x118a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    105a:	ab e3       	ldi	r26, 0x3B	; 59
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	eb e3       	ldi	r30, 0x3B	; 59
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <GPIO_writePin+0xb4>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <GPIO_writePin+0xb0>
    107c:	80 95       	com	r24
    107e:	84 23       	and	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	83 c0       	rjmp	.+262    	; 0x118a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	a1 f4       	brne	.+40     	; 0x10b2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    108a:	a8 e3       	ldi	r26, 0x38	; 56
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e3       	ldi	r30, 0x38	; 56
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <GPIO_writePin+0xe4>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <GPIO_writePin+0xe0>
    10ac:	84 2b       	or	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	6c c0       	rjmp	.+216    	; 0x118a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    10b2:	a8 e3       	ldi	r26, 0x38	; 56
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e8 e3       	ldi	r30, 0x38	; 56
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <GPIO_writePin+0x10c>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <GPIO_writePin+0x108>
    10d4:	80 95       	com	r24
    10d6:	84 23       	and	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	57 c0       	rjmp	.+174    	; 0x118a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	a1 f4       	brne	.+40     	; 0x110a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    10e2:	a5 e3       	ldi	r26, 0x35	; 53
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e5 e3       	ldi	r30, 0x35	; 53
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <GPIO_writePin+0x13c>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <GPIO_writePin+0x138>
    1104:	84 2b       	or	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	40 c0       	rjmp	.+128    	; 0x118a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    110a:	a5 e3       	ldi	r26, 0x35	; 53
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e5 e3       	ldi	r30, 0x35	; 53
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <GPIO_writePin+0x164>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <GPIO_writePin+0x160>
    112c:	80 95       	com	r24
    112e:	84 23       	and	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	2b c0       	rjmp	.+86     	; 0x118a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	a1 f4       	brne	.+40     	; 0x1162 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    113a:	a2 e3       	ldi	r26, 0x32	; 50
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e2 e3       	ldi	r30, 0x32	; 50
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_writePin+0x194>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_writePin+0x190>
    115c:	84 2b       	or	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	14 c0       	rjmp	.+40     	; 0x118a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1162:	a2 e3       	ldi	r26, 0x32	; 50
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e2 e3       	ldi	r30, 0x32	; 50
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <GPIO_writePin+0x1bc>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <GPIO_writePin+0x1b8>
    1184:	80 95       	com	r24
    1186:	84 23       	and	r24, r20
    1188:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <GPIO_readPin+0x6>
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <GPIO_readPin+0x8>
    11a2:	0f 92       	push	r0
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	8a 83       	std	Y+2, r24	; 0x02
    11aa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    11ac:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	88 30       	cpi	r24, 0x08	; 8
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <GPIO_readPin+0x1c>
    11b4:	84 c0       	rjmp	.+264    	; 0x12be <GPIO_readPin+0x124>
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	84 30       	cpi	r24, 0x04	; 4
    11ba:	08 f0       	brcs	.+2      	; 0x11be <GPIO_readPin+0x24>
    11bc:	80 c0       	rjmp	.+256    	; 0x12be <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3d 83       	std	Y+5, r19	; 0x05
    11c6:	2c 83       	std	Y+4, r18	; 0x04
    11c8:	4c 81       	ldd	r20, Y+4	; 0x04
    11ca:	5d 81       	ldd	r21, Y+5	; 0x05
    11cc:	41 30       	cpi	r20, 0x01	; 1
    11ce:	51 05       	cpc	r21, r1
    11d0:	79 f1       	breq	.+94     	; 0x1230 <GPIO_readPin+0x96>
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	9d 81       	ldd	r25, Y+5	; 0x05
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	91 05       	cpc	r25, r1
    11da:	34 f4       	brge	.+12     	; 0x11e8 <GPIO_readPin+0x4e>
    11dc:	2c 81       	ldd	r18, Y+4	; 0x04
    11de:	3d 81       	ldd	r19, Y+5	; 0x05
    11e0:	21 15       	cp	r18, r1
    11e2:	31 05       	cpc	r19, r1
    11e4:	69 f0       	breq	.+26     	; 0x1200 <GPIO_readPin+0x66>
    11e6:	6b c0       	rjmp	.+214    	; 0x12be <GPIO_readPin+0x124>
    11e8:	4c 81       	ldd	r20, Y+4	; 0x04
    11ea:	5d 81       	ldd	r21, Y+5	; 0x05
    11ec:	42 30       	cpi	r20, 0x02	; 2
    11ee:	51 05       	cpc	r21, r1
    11f0:	b9 f1       	breq	.+110    	; 0x1260 <GPIO_readPin+0xc6>
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	9d 81       	ldd	r25, Y+5	; 0x05
    11f6:	83 30       	cpi	r24, 0x03	; 3
    11f8:	91 05       	cpc	r25, r1
    11fa:	09 f4       	brne	.+2      	; 0x11fe <GPIO_readPin+0x64>
    11fc:	49 c0       	rjmp	.+146    	; 0x1290 <GPIO_readPin+0xf6>
    11fe:	5f c0       	rjmp	.+190    	; 0x12be <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1200:	e9 e3       	ldi	r30, 0x39	; 57
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	a9 01       	movw	r20, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <GPIO_readPin+0x7e>
    1214:	55 95       	asr	r21
    1216:	47 95       	ror	r20
    1218:	8a 95       	dec	r24
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <GPIO_readPin+0x7a>
    121c:	ca 01       	movw	r24, r20
    121e:	81 70       	andi	r24, 0x01	; 1
    1220:	90 70       	andi	r25, 0x00	; 0
    1222:	88 23       	and	r24, r24
    1224:	19 f0       	breq	.+6      	; 0x122c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	49 c0       	rjmp	.+146    	; 0x12be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    122c:	19 82       	std	Y+1, r1	; 0x01
    122e:	47 c0       	rjmp	.+142    	; 0x12be <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1230:	e6 e3       	ldi	r30, 0x36	; 54
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a9 01       	movw	r20, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <GPIO_readPin+0xae>
    1244:	55 95       	asr	r21
    1246:	47 95       	ror	r20
    1248:	8a 95       	dec	r24
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <GPIO_readPin+0xaa>
    124c:	ca 01       	movw	r24, r20
    124e:	81 70       	andi	r24, 0x01	; 1
    1250:	90 70       	andi	r25, 0x00	; 0
    1252:	88 23       	and	r24, r24
    1254:	19 f0       	breq	.+6      	; 0x125c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	31 c0       	rjmp	.+98     	; 0x12be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    125c:	19 82       	std	Y+1, r1	; 0x01
    125e:	2f c0       	rjmp	.+94     	; 0x12be <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1260:	e3 e3       	ldi	r30, 0x33	; 51
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a9 01       	movw	r20, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <GPIO_readPin+0xde>
    1274:	55 95       	asr	r21
    1276:	47 95       	ror	r20
    1278:	8a 95       	dec	r24
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <GPIO_readPin+0xda>
    127c:	ca 01       	movw	r24, r20
    127e:	81 70       	andi	r24, 0x01	; 1
    1280:	90 70       	andi	r25, 0x00	; 0
    1282:	88 23       	and	r24, r24
    1284:	19 f0       	breq	.+6      	; 0x128c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	19 c0       	rjmp	.+50     	; 0x12be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    128c:	19 82       	std	Y+1, r1	; 0x01
    128e:	17 c0       	rjmp	.+46     	; 0x12be <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1290:	e0 e3       	ldi	r30, 0x30	; 48
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a9 01       	movw	r20, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_readPin+0x10e>
    12a4:	55 95       	asr	r21
    12a6:	47 95       	ror	r20
    12a8:	8a 95       	dec	r24
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_readPin+0x10a>
    12ac:	ca 01       	movw	r24, r20
    12ae:	81 70       	andi	r24, 0x01	; 1
    12b0:	90 70       	andi	r25, 0x00	; 0
    12b2:	88 23       	and	r24, r24
    12b4:	19 f0       	breq	.+6      	; 0x12bc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12bc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    12be:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <GPIO_setupPortDirection+0x6>
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <GPIO_setupPortDirection+0x8>
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	84 30       	cpi	r24, 0x04	; 4
    12e4:	90 f5       	brcc	.+100    	; 0x134a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	3c 83       	std	Y+4, r19	; 0x04
    12ee:	2b 83       	std	Y+3, r18	; 0x03
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	91 05       	cpc	r25, r1
    12f8:	d1 f0       	breq	.+52     	; 0x132e <GPIO_setupPortDirection+0x5e>
    12fa:	2b 81       	ldd	r18, Y+3	; 0x03
    12fc:	3c 81       	ldd	r19, Y+4	; 0x04
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	31 05       	cpc	r19, r1
    1302:	2c f4       	brge	.+10     	; 0x130e <GPIO_setupPortDirection+0x3e>
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	61 f0       	breq	.+24     	; 0x1324 <GPIO_setupPortDirection+0x54>
    130c:	1e c0       	rjmp	.+60     	; 0x134a <GPIO_setupPortDirection+0x7a>
    130e:	2b 81       	ldd	r18, Y+3	; 0x03
    1310:	3c 81       	ldd	r19, Y+4	; 0x04
    1312:	22 30       	cpi	r18, 0x02	; 2
    1314:	31 05       	cpc	r19, r1
    1316:	81 f0       	breq	.+32     	; 0x1338 <GPIO_setupPortDirection+0x68>
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	9c 81       	ldd	r25, Y+4	; 0x04
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	91 05       	cpc	r25, r1
    1320:	81 f0       	breq	.+32     	; 0x1342 <GPIO_setupPortDirection+0x72>
    1322:	13 c0       	rjmp	.+38     	; 0x134a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1324:	ea e3       	ldi	r30, 0x3A	; 58
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	80 83       	st	Z, r24
    132c:	0e c0       	rjmp	.+28     	; 0x134a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    132e:	e7 e3       	ldi	r30, 0x37	; 55
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	80 83       	st	Z, r24
    1336:	09 c0       	rjmp	.+18     	; 0x134a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1338:	e4 e3       	ldi	r30, 0x34	; 52
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	80 83       	st	Z, r24
    1340:	04 c0       	rjmp	.+8      	; 0x134a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1342:	e1 e3       	ldi	r30, 0x31	; 49
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	80 83       	st	Z, r24
			break;
		}
	}
}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <GPIO_writePort+0x6>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <GPIO_writePort+0x8>
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	84 30       	cpi	r24, 0x04	; 4
    136c:	90 f5       	brcc	.+100    	; 0x13d2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3c 83       	std	Y+4, r19	; 0x04
    1376:	2b 83       	std	Y+3, r18	; 0x03
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	91 05       	cpc	r25, r1
    1380:	d1 f0       	breq	.+52     	; 0x13b6 <GPIO_writePort+0x5e>
    1382:	2b 81       	ldd	r18, Y+3	; 0x03
    1384:	3c 81       	ldd	r19, Y+4	; 0x04
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	2c f4       	brge	.+10     	; 0x1396 <GPIO_writePort+0x3e>
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	61 f0       	breq	.+24     	; 0x13ac <GPIO_writePort+0x54>
    1394:	1e c0       	rjmp	.+60     	; 0x13d2 <GPIO_writePort+0x7a>
    1396:	2b 81       	ldd	r18, Y+3	; 0x03
    1398:	3c 81       	ldd	r19, Y+4	; 0x04
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	81 f0       	breq	.+32     	; 0x13c0 <GPIO_writePort+0x68>
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	91 05       	cpc	r25, r1
    13a8:	81 f0       	breq	.+32     	; 0x13ca <GPIO_writePort+0x72>
    13aa:	13 c0       	rjmp	.+38     	; 0x13d2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    13ac:	eb e3       	ldi	r30, 0x3B	; 59
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	80 83       	st	Z, r24
    13b4:	0e c0       	rjmp	.+28     	; 0x13d2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    13b6:	e8 e3       	ldi	r30, 0x38	; 56
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	80 83       	st	Z, r24
    13be:	09 c0       	rjmp	.+18     	; 0x13d2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    13c0:	e5 e3       	ldi	r30, 0x35	; 53
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	80 83       	st	Z, r24
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    13ca:	e2 e3       	ldi	r30, 0x32	; 50
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	80 83       	st	Z, r24
			break;
		}
	}
}
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <GPIO_readPort+0x6>
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <GPIO_readPort+0x8>
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    13ee:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	84 30       	cpi	r24, 0x04	; 4
    13f4:	90 f5       	brcc	.+100    	; 0x145a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	3c 83       	std	Y+4, r19	; 0x04
    13fe:	2b 83       	std	Y+3, r18	; 0x03
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	91 05       	cpc	r25, r1
    1408:	d1 f0       	breq	.+52     	; 0x143e <GPIO_readPort+0x5e>
    140a:	2b 81       	ldd	r18, Y+3	; 0x03
    140c:	3c 81       	ldd	r19, Y+4	; 0x04
    140e:	22 30       	cpi	r18, 0x02	; 2
    1410:	31 05       	cpc	r19, r1
    1412:	2c f4       	brge	.+10     	; 0x141e <GPIO_readPort+0x3e>
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	61 f0       	breq	.+24     	; 0x1434 <GPIO_readPort+0x54>
    141c:	1e c0       	rjmp	.+60     	; 0x145a <GPIO_readPort+0x7a>
    141e:	2b 81       	ldd	r18, Y+3	; 0x03
    1420:	3c 81       	ldd	r19, Y+4	; 0x04
    1422:	22 30       	cpi	r18, 0x02	; 2
    1424:	31 05       	cpc	r19, r1
    1426:	81 f0       	breq	.+32     	; 0x1448 <GPIO_readPort+0x68>
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	83 30       	cpi	r24, 0x03	; 3
    142e:	91 05       	cpc	r25, r1
    1430:	81 f0       	breq	.+32     	; 0x1452 <GPIO_readPort+0x72>
    1432:	13 c0       	rjmp	.+38     	; 0x145a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1434:	e9 e3       	ldi	r30, 0x39	; 57
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	0e c0       	rjmp	.+28     	; 0x145a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    143e:	e6 e3       	ldi	r30, 0x36	; 54
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	09 c0       	rjmp	.+18     	; 0x145a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1448:	e3 e3       	ldi	r30, 0x33	; 51
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	04 c0       	rjmp	.+8      	; 0x145a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1452:	e0 e3       	ldi	r30, 0x30	; 48
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    145a:	89 81       	ldd	r24, Y+1	; 0x01
}
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <init>:
uint8 check = 0; //to make sure that the 2 arrays are the same
uint8 Buzzer_Flag=0; //flag to trigger buzzer after 3 wrong attempts
/*****************FUNCTIONS DEFINITIONS***********************************/

/* Description: Initialization of LCD, UART,Timer0 */
void init(void) {
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	66 97       	sbiw	r28, 0x16	; 22
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
    147e:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_init>

	UART_Config config = { DISABLED, ONE, EIGHT, 9600 };
    1482:	ce 01       	movw	r24, r28
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	9e 87       	std	Y+14, r25	; 0x0e
    1488:	8d 87       	std	Y+13, r24	; 0x0d
    148a:	e1 ef       	ldi	r30, 0xF1	; 241
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	f8 8b       	std	Y+16, r31	; 0x10
    1490:	ef 87       	std	Y+15, r30	; 0x0f
    1492:	f7 e0       	ldi	r31, 0x07	; 7
    1494:	f9 8b       	std	Y+17, r31	; 0x11
    1496:	ef 85       	ldd	r30, Y+15	; 0x0f
    1498:	f8 89       	ldd	r31, Y+16	; 0x10
    149a:	00 80       	ld	r0, Z
    149c:	8f 85       	ldd	r24, Y+15	; 0x0f
    149e:	98 89       	ldd	r25, Y+16	; 0x10
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	98 8b       	std	Y+16, r25	; 0x10
    14a4:	8f 87       	std	Y+15, r24	; 0x0f
    14a6:	ed 85       	ldd	r30, Y+13	; 0x0d
    14a8:	fe 85       	ldd	r31, Y+14	; 0x0e
    14aa:	00 82       	st	Z, r0
    14ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	9e 87       	std	Y+14, r25	; 0x0e
    14b4:	8d 87       	std	Y+13, r24	; 0x0d
    14b6:	99 89       	ldd	r25, Y+17	; 0x11
    14b8:	91 50       	subi	r25, 0x01	; 1
    14ba:	99 8b       	std	Y+17, r25	; 0x11
    14bc:	e9 89       	ldd	r30, Y+17	; 0x11
    14be:	ee 23       	and	r30, r30
    14c0:	51 f7       	brne	.-44     	; 0x1496 <init+0x2c>
	UART_init(&config);
    14c2:	ce 01       	movw	r24, r28
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <UART_init>

	Timer_config confg = { NORMAL, F1024, 0, 0 };
    14ca:	ce 01       	movw	r24, r28
    14cc:	08 96       	adiw	r24, 0x08	; 8
    14ce:	9b 8b       	std	Y+19, r25	; 0x13
    14d0:	8a 8b       	std	Y+18, r24	; 0x12
    14d2:	ec ee       	ldi	r30, 0xEC	; 236
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	fd 8b       	std	Y+21, r31	; 0x15
    14d8:	ec 8b       	std	Y+20, r30	; 0x14
    14da:	f5 e0       	ldi	r31, 0x05	; 5
    14dc:	fe 8b       	std	Y+22, r31	; 0x16
    14de:	ec 89       	ldd	r30, Y+20	; 0x14
    14e0:	fd 89       	ldd	r31, Y+21	; 0x15
    14e2:	00 80       	ld	r0, Z
    14e4:	8c 89       	ldd	r24, Y+20	; 0x14
    14e6:	9d 89       	ldd	r25, Y+21	; 0x15
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	9d 8b       	std	Y+21, r25	; 0x15
    14ec:	8c 8b       	std	Y+20, r24	; 0x14
    14ee:	ea 89       	ldd	r30, Y+18	; 0x12
    14f0:	fb 89       	ldd	r31, Y+19	; 0x13
    14f2:	00 82       	st	Z, r0
    14f4:	8a 89       	ldd	r24, Y+18	; 0x12
    14f6:	9b 89       	ldd	r25, Y+19	; 0x13
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	9b 8b       	std	Y+19, r25	; 0x13
    14fc:	8a 8b       	std	Y+18, r24	; 0x12
    14fe:	9e 89       	ldd	r25, Y+22	; 0x16
    1500:	91 50       	subi	r25, 0x01	; 1
    1502:	9e 8b       	std	Y+22, r25	; 0x16
    1504:	ee 89       	ldd	r30, Y+22	; 0x16
    1506:	ee 23       	and	r30, r30
    1508:	51 f7       	brne	.-44     	; 0x14de <init+0x74>
	Timer0_init(&confg);
    150a:	ce 01       	movw	r24, r28
    150c:	08 96       	adiw	r24, 0x08	; 8
    150e:	0e 94 09 06 	call	0xc12	; 0xc12 <Timer0_init>
}
    1512:	66 96       	adiw	r28, 0x16	; 22
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <Enter_Pass>:
 * it makes sure that the user enters the same password twice
 * it sends the verified password the other ECU through UART
 * while(1) is used to stay in this function until the user
 * enters the same password twice
 */
void Enter_Pass(void) {
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	e9 97       	sbiw	r28, 0x39	; 57
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	while (1) {

		LCD_displayStringRowColumn(0, 0, "Please Enter Pass:");
    153c:	20 e6       	ldi	r18, 0x60	; 96
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	a9 01       	movw	r20, r18
    1546:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_moveCursor>
		for (i = 0; i < PASS_SIZE; i++) {
    1552:	19 ae       	std	Y+57, r1	; 0x39
    1554:	81 c0       	rjmp	.+258    	; 0x1658 <Enter_Pass+0x134>
			//enter password for the first time
			Pass[i] = KEYPAD_getPressedKey();
    1556:	89 ad       	ldd	r24, Y+57	; 0x39
    1558:	08 2f       	mov	r16, r24
    155a:	10 e0       	ldi	r17, 0x00	; 0
    155c:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <KEYPAD_getPressedKey>
    1560:	f8 01       	movw	r30, r16
    1562:	e4 50       	subi	r30, 0x04	; 4
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    1568:	8a e2       	ldi	r24, 0x2A	; 42
    156a:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_displayCharacter>
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	aa ef       	ldi	r26, 0xFA	; 250
    1574:	b3 e4       	ldi	r27, 0x43	; 67
    1576:	8d ab       	std	Y+53, r24	; 0x35
    1578:	9e ab       	std	Y+54, r25	; 0x36
    157a:	af ab       	std	Y+55, r26	; 0x37
    157c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157e:	6d a9       	ldd	r22, Y+53	; 0x35
    1580:	7e a9       	ldd	r23, Y+54	; 0x36
    1582:	8f a9       	ldd	r24, Y+55	; 0x37
    1584:	98 ad       	ldd	r25, Y+56	; 0x38
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	4a ef       	ldi	r20, 0xFA	; 250
    158c:	54 e4       	ldi	r21, 0x44	; 68
    158e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	89 ab       	std	Y+49, r24	; 0x31
    1598:	9a ab       	std	Y+50, r25	; 0x32
    159a:	ab ab       	std	Y+51, r26	; 0x33
    159c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    159e:	69 a9       	ldd	r22, Y+49	; 0x31
    15a0:	7a a9       	ldd	r23, Y+50	; 0x32
    15a2:	8b a9       	ldd	r24, Y+51	; 0x33
    15a4:	9c a9       	ldd	r25, Y+52	; 0x34
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e8       	ldi	r20, 0x80	; 128
    15ac:	5f e3       	ldi	r21, 0x3F	; 63
    15ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15b2:	88 23       	and	r24, r24
    15b4:	2c f4       	brge	.+10     	; 0x15c0 <Enter_Pass+0x9c>
		__ticks = 1;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	98 ab       	std	Y+48, r25	; 0x30
    15bc:	8f a7       	std	Y+47, r24	; 0x2f
    15be:	3f c0       	rjmp	.+126    	; 0x163e <Enter_Pass+0x11a>
	else if (__tmp > 65535)
    15c0:	69 a9       	ldd	r22, Y+49	; 0x31
    15c2:	7a a9       	ldd	r23, Y+50	; 0x32
    15c4:	8b a9       	ldd	r24, Y+51	; 0x33
    15c6:	9c a9       	ldd	r25, Y+52	; 0x34
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	3f ef       	ldi	r19, 0xFF	; 255
    15cc:	4f e7       	ldi	r20, 0x7F	; 127
    15ce:	57 e4       	ldi	r21, 0x47	; 71
    15d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15d4:	18 16       	cp	r1, r24
    15d6:	4c f5       	brge	.+82     	; 0x162a <Enter_Pass+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d8:	6d a9       	ldd	r22, Y+53	; 0x35
    15da:	7e a9       	ldd	r23, Y+54	; 0x36
    15dc:	8f a9       	ldd	r24, Y+55	; 0x37
    15de:	98 ad       	ldd	r25, Y+56	; 0x38
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e2       	ldi	r20, 0x20	; 32
    15e6:	51 e4       	ldi	r21, 0x41	; 65
    15e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	bc 01       	movw	r22, r24
    15f2:	cd 01       	movw	r24, r26
    15f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	98 ab       	std	Y+48, r25	; 0x30
    15fe:	8f a7       	std	Y+47, r24	; 0x2f
    1600:	0f c0       	rjmp	.+30     	; 0x1620 <Enter_Pass+0xfc>
    1602:	88 ec       	ldi	r24, 0xC8	; 200
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	9e a7       	std	Y+46, r25	; 0x2e
    1608:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    160a:	8d a5       	ldd	r24, Y+45	; 0x2d
    160c:	9e a5       	ldd	r25, Y+46	; 0x2e
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	f1 f7       	brne	.-4      	; 0x160e <Enter_Pass+0xea>
    1612:	9e a7       	std	Y+46, r25	; 0x2e
    1614:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1616:	8f a5       	ldd	r24, Y+47	; 0x2f
    1618:	98 a9       	ldd	r25, Y+48	; 0x30
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	98 ab       	std	Y+48, r25	; 0x30
    161e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1620:	8f a5       	ldd	r24, Y+47	; 0x2f
    1622:	98 a9       	ldd	r25, Y+48	; 0x30
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	69 f7       	brne	.-38     	; 0x1602 <Enter_Pass+0xde>
    1628:	14 c0       	rjmp	.+40     	; 0x1652 <Enter_Pass+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    162a:	69 a9       	ldd	r22, Y+49	; 0x31
    162c:	7a a9       	ldd	r23, Y+50	; 0x32
    162e:	8b a9       	ldd	r24, Y+51	; 0x33
    1630:	9c a9       	ldd	r25, Y+52	; 0x34
    1632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	98 ab       	std	Y+48, r25	; 0x30
    163c:	8f a7       	std	Y+47, r24	; 0x2f
    163e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1640:	98 a9       	ldd	r25, Y+48	; 0x30
    1642:	9c a7       	std	Y+44, r25	; 0x2c
    1644:	8b a7       	std	Y+43, r24	; 0x2b
    1646:	8b a5       	ldd	r24, Y+43	; 0x2b
    1648:	9c a5       	ldd	r25, Y+44	; 0x2c
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	f1 f7       	brne	.-4      	; 0x164a <Enter_Pass+0x126>
    164e:	9c a7       	std	Y+44, r25	; 0x2c
    1650:	8b a7       	std	Y+43, r24	; 0x2b
	uint8 i;
	while (1) {

		LCD_displayStringRowColumn(0, 0, "Please Enter Pass:");
		LCD_moveCursor(1, 0);
		for (i = 0; i < PASS_SIZE; i++) {
    1652:	89 ad       	ldd	r24, Y+57	; 0x39
    1654:	8f 5f       	subi	r24, 0xFF	; 255
    1656:	89 af       	std	Y+57, r24	; 0x39
    1658:	89 ad       	ldd	r24, Y+57	; 0x39
    165a:	85 30       	cpi	r24, 0x05	; 5
    165c:	08 f4       	brcc	.+2      	; 0x1660 <Enter_Pass+0x13c>
    165e:	7b cf       	rjmp	.-266    	; 0x1556 <Enter_Pass+0x32>
			//enter password for the first time
			Pass[i] = KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(500);
		}
		LCD_clearScreen();
    1660:	0e 94 82 17 	call	0x2f04	; 0x2f04 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Confirm your Pass:");
    1664:	23 e7       	ldi	r18, 0x73	; 115
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	a9 01       	movw	r20, r18
    166e:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_moveCursor>
		for (i = 0; i < PASS_SIZE; i++) {
    167a:	19 ae       	std	Y+57, r1	; 0x39
    167c:	81 c0       	rjmp	.+258    	; 0x1780 <Enter_Pass+0x25c>
			//confirm password
			PassConfirm[i] = KEYPAD_getPressedKey();
    167e:	89 ad       	ldd	r24, Y+57	; 0x39
    1680:	08 2f       	mov	r16, r24
    1682:	10 e0       	ldi	r17, 0x00	; 0
    1684:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <KEYPAD_getPressedKey>
    1688:	f8 01       	movw	r30, r16
    168a:	ea 5f       	subi	r30, 0xFA	; 250
    168c:	fe 4f       	sbci	r31, 0xFE	; 254
    168e:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    1690:	8a e2       	ldi	r24, 0x2A	; 42
    1692:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_displayCharacter>
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	aa ef       	ldi	r26, 0xFA	; 250
    169c:	b3 e4       	ldi	r27, 0x43	; 67
    169e:	8f a3       	std	Y+39, r24	; 0x27
    16a0:	98 a7       	std	Y+40, r25	; 0x28
    16a2:	a9 a7       	std	Y+41, r26	; 0x29
    16a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a6:	6f a1       	ldd	r22, Y+39	; 0x27
    16a8:	78 a5       	ldd	r23, Y+40	; 0x28
    16aa:	89 a5       	ldd	r24, Y+41	; 0x29
    16ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	4a ef       	ldi	r20, 0xFA	; 250
    16b4:	54 e4       	ldi	r21, 0x44	; 68
    16b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	8b a3       	std	Y+35, r24	; 0x23
    16c0:	9c a3       	std	Y+36, r25	; 0x24
    16c2:	ad a3       	std	Y+37, r26	; 0x25
    16c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16c6:	6b a1       	ldd	r22, Y+35	; 0x23
    16c8:	7c a1       	ldd	r23, Y+36	; 0x24
    16ca:	8d a1       	ldd	r24, Y+37	; 0x25
    16cc:	9e a1       	ldd	r25, Y+38	; 0x26
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e8       	ldi	r20, 0x80	; 128
    16d4:	5f e3       	ldi	r21, 0x3F	; 63
    16d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16da:	88 23       	and	r24, r24
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <Enter_Pass+0x1c4>
		__ticks = 1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	9a a3       	std	Y+34, r25	; 0x22
    16e4:	89 a3       	std	Y+33, r24	; 0x21
    16e6:	3f c0       	rjmp	.+126    	; 0x1766 <Enter_Pass+0x242>
	else if (__tmp > 65535)
    16e8:	6b a1       	ldd	r22, Y+35	; 0x23
    16ea:	7c a1       	ldd	r23, Y+36	; 0x24
    16ec:	8d a1       	ldd	r24, Y+37	; 0x25
    16ee:	9e a1       	ldd	r25, Y+38	; 0x26
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	3f ef       	ldi	r19, 0xFF	; 255
    16f4:	4f e7       	ldi	r20, 0x7F	; 127
    16f6:	57 e4       	ldi	r21, 0x47	; 71
    16f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16fc:	18 16       	cp	r1, r24
    16fe:	4c f5       	brge	.+82     	; 0x1752 <Enter_Pass+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1700:	6f a1       	ldd	r22, Y+39	; 0x27
    1702:	78 a5       	ldd	r23, Y+40	; 0x28
    1704:	89 a5       	ldd	r24, Y+41	; 0x29
    1706:	9a a5       	ldd	r25, Y+42	; 0x2a
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e2       	ldi	r20, 0x20	; 32
    170e:	51 e4       	ldi	r21, 0x41	; 65
    1710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	bc 01       	movw	r22, r24
    171a:	cd 01       	movw	r24, r26
    171c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	9a a3       	std	Y+34, r25	; 0x22
    1726:	89 a3       	std	Y+33, r24	; 0x21
    1728:	0f c0       	rjmp	.+30     	; 0x1748 <Enter_Pass+0x224>
    172a:	88 ec       	ldi	r24, 0xC8	; 200
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	98 a3       	std	Y+32, r25	; 0x20
    1730:	8f 8f       	std	Y+31, r24	; 0x1f
    1732:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1734:	98 a1       	ldd	r25, Y+32	; 0x20
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <Enter_Pass+0x212>
    173a:	98 a3       	std	Y+32, r25	; 0x20
    173c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173e:	89 a1       	ldd	r24, Y+33	; 0x21
    1740:	9a a1       	ldd	r25, Y+34	; 0x22
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	9a a3       	std	Y+34, r25	; 0x22
    1746:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1748:	89 a1       	ldd	r24, Y+33	; 0x21
    174a:	9a a1       	ldd	r25, Y+34	; 0x22
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	69 f7       	brne	.-38     	; 0x172a <Enter_Pass+0x206>
    1750:	14 c0       	rjmp	.+40     	; 0x177a <Enter_Pass+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1752:	6b a1       	ldd	r22, Y+35	; 0x23
    1754:	7c a1       	ldd	r23, Y+36	; 0x24
    1756:	8d a1       	ldd	r24, Y+37	; 0x25
    1758:	9e a1       	ldd	r25, Y+38	; 0x26
    175a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	9a a3       	std	Y+34, r25	; 0x22
    1764:	89 a3       	std	Y+33, r24	; 0x21
    1766:	89 a1       	ldd	r24, Y+33	; 0x21
    1768:	9a a1       	ldd	r25, Y+34	; 0x22
    176a:	9e 8f       	std	Y+30, r25	; 0x1e
    176c:	8d 8f       	std	Y+29, r24	; 0x1d
    176e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1770:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <Enter_Pass+0x24e>
    1776:	9e 8f       	std	Y+30, r25	; 0x1e
    1778:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
		}
		LCD_clearScreen();
		LCD_displayStringRowColumn(0, 0, "Confirm your Pass:");
		LCD_moveCursor(1, 0);
		for (i = 0; i < PASS_SIZE; i++) {
    177a:	89 ad       	ldd	r24, Y+57	; 0x39
    177c:	8f 5f       	subi	r24, 0xFF	; 255
    177e:	89 af       	std	Y+57, r24	; 0x39
    1780:	89 ad       	ldd	r24, Y+57	; 0x39
    1782:	85 30       	cpi	r24, 0x05	; 5
    1784:	08 f4       	brcc	.+2      	; 0x1788 <Enter_Pass+0x264>
    1786:	7b cf       	rjmp	.-266    	; 0x167e <Enter_Pass+0x15a>
			//confirm password
			PassConfirm[i] = KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(500);
		}
		for (i = 0; i < PASS_SIZE; i++) {
    1788:	19 ae       	std	Y+57, r1	; 0x39
    178a:	18 c0       	rjmp	.+48     	; 0x17bc <Enter_Pass+0x298>
			//check that the two passwords are the same
			if (Pass[i] == PassConfirm[i]) {
    178c:	89 ad       	ldd	r24, Y+57	; 0x39
    178e:	88 2f       	mov	r24, r24
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	fc 01       	movw	r30, r24
    1794:	e4 50       	subi	r30, 0x04	; 4
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	20 81       	ld	r18, Z
    179a:	89 ad       	ldd	r24, Y+57	; 0x39
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	fc 01       	movw	r30, r24
    17a2:	ea 5f       	subi	r30, 0xFA	; 250
    17a4:	fe 4f       	sbci	r31, 0xFE	; 254
    17a6:	80 81       	ld	r24, Z
    17a8:	28 17       	cp	r18, r24
    17aa:	29 f4       	brne	.+10     	; 0x17b6 <Enter_Pass+0x292>
				check++;
    17ac:	80 91 fa 00 	lds	r24, 0x00FA
    17b0:	8f 5f       	subi	r24, 0xFF	; 255
    17b2:	80 93 fa 00 	sts	0x00FA, r24
			//confirm password
			PassConfirm[i] = KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(500);
		}
		for (i = 0; i < PASS_SIZE; i++) {
    17b6:	89 ad       	ldd	r24, Y+57	; 0x39
    17b8:	8f 5f       	subi	r24, 0xFF	; 255
    17ba:	89 af       	std	Y+57, r24	; 0x39
    17bc:	89 ad       	ldd	r24, Y+57	; 0x39
    17be:	85 30       	cpi	r24, 0x05	; 5
    17c0:	28 f3       	brcs	.-54     	; 0x178c <Enter_Pass+0x268>
			//check that the two passwords are the same
			if (Pass[i] == PassConfirm[i]) {
				check++;
			}
		}
		LCD_clearScreen();
    17c2:	0e 94 82 17 	call	0x2f04	; 0x2f04 <LCD_clearScreen>
		if (check == 5) { //check = 5 means that the two passwords are the same
    17c6:	80 91 fa 00 	lds	r24, 0x00FA
    17ca:	85 30       	cpi	r24, 0x05	; 5
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <Enter_Pass+0x2ac>
    17ce:	8a c0       	rjmp	.+276    	; 0x18e4 <Enter_Pass+0x3c0>
			UART_sendByte(RECEIVE_PASS); //send signal to the other ECU to receive pass
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	0e 94 1c 18 	call	0x3038	; 0x3038 <UART_sendByte>
			check = 0; //reset variable that makes sure that the 2 passwords are the same
    17d6:	10 92 fa 00 	sts	0x00FA, r1

			for (i = 0; i < PASS_SIZE; i++) {
    17da:	19 ae       	std	Y+57, r1	; 0x39
    17dc:	7e c0       	rjmp	.+252    	; 0x18da <Enter_Pass+0x3b6>
				UART_sendByte(Pass[i]);
    17de:	89 ad       	ldd	r24, Y+57	; 0x39
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	fc 01       	movw	r30, r24
    17e6:	e4 50       	subi	r30, 0x04	; 4
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	80 81       	ld	r24, Z
    17ec:	0e 94 1c 18 	call	0x3038	; 0x3038 <UART_sendByte>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a0 e2       	ldi	r26, 0x20	; 32
    17f6:	b1 e4       	ldi	r27, 0x41	; 65
    17f8:	89 8f       	std	Y+25, r24	; 0x19
    17fa:	9a 8f       	std	Y+26, r25	; 0x1a
    17fc:	ab 8f       	std	Y+27, r26	; 0x1b
    17fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1800:	69 8d       	ldd	r22, Y+25	; 0x19
    1802:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1804:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1806:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	4a ef       	ldi	r20, 0xFA	; 250
    180e:	54 e4       	ldi	r21, 0x44	; 68
    1810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	8d 8b       	std	Y+21, r24	; 0x15
    181a:	9e 8b       	std	Y+22, r25	; 0x16
    181c:	af 8b       	std	Y+23, r26	; 0x17
    181e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1820:	6d 89       	ldd	r22, Y+21	; 0x15
    1822:	7e 89       	ldd	r23, Y+22	; 0x16
    1824:	8f 89       	ldd	r24, Y+23	; 0x17
    1826:	98 8d       	ldd	r25, Y+24	; 0x18
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e8       	ldi	r20, 0x80	; 128
    182e:	5f e3       	ldi	r21, 0x3F	; 63
    1830:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1834:	88 23       	and	r24, r24
    1836:	2c f4       	brge	.+10     	; 0x1842 <Enter_Pass+0x31e>
		__ticks = 1;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	8b 8b       	std	Y+19, r24	; 0x13
    1840:	3f c0       	rjmp	.+126    	; 0x18c0 <Enter_Pass+0x39c>
	else if (__tmp > 65535)
    1842:	6d 89       	ldd	r22, Y+21	; 0x15
    1844:	7e 89       	ldd	r23, Y+22	; 0x16
    1846:	8f 89       	ldd	r24, Y+23	; 0x17
    1848:	98 8d       	ldd	r25, Y+24	; 0x18
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	3f ef       	ldi	r19, 0xFF	; 255
    184e:	4f e7       	ldi	r20, 0x7F	; 127
    1850:	57 e4       	ldi	r21, 0x47	; 71
    1852:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1856:	18 16       	cp	r1, r24
    1858:	4c f5       	brge	.+82     	; 0x18ac <Enter_Pass+0x388>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185a:	69 8d       	ldd	r22, Y+25	; 0x19
    185c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    185e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1860:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e2       	ldi	r20, 0x20	; 32
    1868:	51 e4       	ldi	r21, 0x41	; 65
    186a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	9c 8b       	std	Y+20, r25	; 0x14
    1880:	8b 8b       	std	Y+19, r24	; 0x13
    1882:	0f c0       	rjmp	.+30     	; 0x18a2 <Enter_Pass+0x37e>
    1884:	88 ec       	ldi	r24, 0xC8	; 200
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9a 8b       	std	Y+18, r25	; 0x12
    188a:	89 8b       	std	Y+17, r24	; 0x11
    188c:	89 89       	ldd	r24, Y+17	; 0x11
    188e:	9a 89       	ldd	r25, Y+18	; 0x12
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <Enter_Pass+0x36c>
    1894:	9a 8b       	std	Y+18, r25	; 0x12
    1896:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1898:	8b 89       	ldd	r24, Y+19	; 0x13
    189a:	9c 89       	ldd	r25, Y+20	; 0x14
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	9c 8b       	std	Y+20, r25	; 0x14
    18a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a2:	8b 89       	ldd	r24, Y+19	; 0x13
    18a4:	9c 89       	ldd	r25, Y+20	; 0x14
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	69 f7       	brne	.-38     	; 0x1884 <Enter_Pass+0x360>
    18aa:	14 c0       	rjmp	.+40     	; 0x18d4 <Enter_Pass+0x3b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ac:	6d 89       	ldd	r22, Y+21	; 0x15
    18ae:	7e 89       	ldd	r23, Y+22	; 0x16
    18b0:	8f 89       	ldd	r24, Y+23	; 0x17
    18b2:	98 8d       	ldd	r25, Y+24	; 0x18
    18b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	9c 8b       	std	Y+20, r25	; 0x14
    18be:	8b 8b       	std	Y+19, r24	; 0x13
    18c0:	8b 89       	ldd	r24, Y+19	; 0x13
    18c2:	9c 89       	ldd	r25, Y+20	; 0x14
    18c4:	98 8b       	std	Y+16, r25	; 0x10
    18c6:	8f 87       	std	Y+15, r24	; 0x0f
    18c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ca:	98 89       	ldd	r25, Y+16	; 0x10
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <Enter_Pass+0x3a8>
    18d0:	98 8b       	std	Y+16, r25	; 0x10
    18d2:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_clearScreen();
		if (check == 5) { //check = 5 means that the two passwords are the same
			UART_sendByte(RECEIVE_PASS); //send signal to the other ECU to receive pass
			check = 0; //reset variable that makes sure that the 2 passwords are the same

			for (i = 0; i < PASS_SIZE; i++) {
    18d4:	89 ad       	ldd	r24, Y+57	; 0x39
    18d6:	8f 5f       	subi	r24, 0xFF	; 255
    18d8:	89 af       	std	Y+57, r24	; 0x39
    18da:	89 ad       	ldd	r24, Y+57	; 0x39
    18dc:	85 30       	cpi	r24, 0x05	; 5
    18de:	08 f4       	brcc	.+2      	; 0x18e2 <Enter_Pass+0x3be>
    18e0:	7e cf       	rjmp	.-260    	; 0x17de <Enter_Pass+0x2ba>
    18e2:	7d c0       	rjmp	.+250    	; 0x19de <Enter_Pass+0x4ba>
				UART_sendByte(Pass[i]);
				_delay_ms(10);
			}
			break; //go out of this function only if the 2 password matches
		}
		check = 0; //reset variable that makes sure that the 2 passwords are the same
    18e4:	10 92 fa 00 	sts	0x00FA, r1
		LCD_clearScreen();
    18e8:	0e 94 82 17 	call	0x2f04	; 0x2f04 <LCD_clearScreen>
		LCD_displayString("Invalid,Try Again");
    18ec:	86 e8       	ldi	r24, 0x86	; 134
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayString>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	aa e7       	ldi	r26, 0x7A	; 122
    18fa:	b4 e4       	ldi	r27, 0x44	; 68
    18fc:	8b 87       	std	Y+11, r24	; 0x0b
    18fe:	9c 87       	std	Y+12, r25	; 0x0c
    1900:	ad 87       	std	Y+13, r26	; 0x0d
    1902:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1904:	6b 85       	ldd	r22, Y+11	; 0x0b
    1906:	7c 85       	ldd	r23, Y+12	; 0x0c
    1908:	8d 85       	ldd	r24, Y+13	; 0x0d
    190a:	9e 85       	ldd	r25, Y+14	; 0x0e
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	4a ef       	ldi	r20, 0xFA	; 250
    1912:	54 e4       	ldi	r21, 0x44	; 68
    1914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	8f 83       	std	Y+7, r24	; 0x07
    191e:	98 87       	std	Y+8, r25	; 0x08
    1920:	a9 87       	std	Y+9, r26	; 0x09
    1922:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1924:	6f 81       	ldd	r22, Y+7	; 0x07
    1926:	78 85       	ldd	r23, Y+8	; 0x08
    1928:	89 85       	ldd	r24, Y+9	; 0x09
    192a:	9a 85       	ldd	r25, Y+10	; 0x0a
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e8       	ldi	r20, 0x80	; 128
    1932:	5f e3       	ldi	r21, 0x3F	; 63
    1934:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1938:	88 23       	and	r24, r24
    193a:	2c f4       	brge	.+10     	; 0x1946 <Enter_Pass+0x422>
		__ticks = 1;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9e 83       	std	Y+6, r25	; 0x06
    1942:	8d 83       	std	Y+5, r24	; 0x05
    1944:	3f c0       	rjmp	.+126    	; 0x19c4 <Enter_Pass+0x4a0>
	else if (__tmp > 65535)
    1946:	6f 81       	ldd	r22, Y+7	; 0x07
    1948:	78 85       	ldd	r23, Y+8	; 0x08
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	3f ef       	ldi	r19, 0xFF	; 255
    1952:	4f e7       	ldi	r20, 0x7F	; 127
    1954:	57 e4       	ldi	r21, 0x47	; 71
    1956:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195a:	18 16       	cp	r1, r24
    195c:	4c f5       	brge	.+82     	; 0x19b0 <Enter_Pass+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1960:	7c 85       	ldd	r23, Y+12	; 0x0c
    1962:	8d 85       	ldd	r24, Y+13	; 0x0d
    1964:	9e 85       	ldd	r25, Y+14	; 0x0e
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e2       	ldi	r20, 0x20	; 32
    196c:	51 e4       	ldi	r21, 0x41	; 65
    196e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	bc 01       	movw	r22, r24
    1978:	cd 01       	movw	r24, r26
    197a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	9e 83       	std	Y+6, r25	; 0x06
    1984:	8d 83       	std	Y+5, r24	; 0x05
    1986:	0f c0       	rjmp	.+30     	; 0x19a6 <Enter_Pass+0x482>
    1988:	88 ec       	ldi	r24, 0xC8	; 200
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9c 83       	std	Y+4, r25	; 0x04
    198e:	8b 83       	std	Y+3, r24	; 0x03
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <Enter_Pass+0x470>
    1998:	9c 83       	std	Y+4, r25	; 0x04
    199a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a6:	8d 81       	ldd	r24, Y+5	; 0x05
    19a8:	9e 81       	ldd	r25, Y+6	; 0x06
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	69 f7       	brne	.-38     	; 0x1988 <Enter_Pass+0x464>
    19ae:	14 c0       	rjmp	.+40     	; 0x19d8 <Enter_Pass+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b0:	6f 81       	ldd	r22, Y+7	; 0x07
    19b2:	78 85       	ldd	r23, Y+8	; 0x08
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
    19c4:	8d 81       	ldd	r24, Y+5	; 0x05
    19c6:	9e 81       	ldd	r25, Y+6	; 0x06
    19c8:	9a 83       	std	Y+2, r25	; 0x02
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <Enter_Pass+0x4ac>
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    19d8:	0e 94 82 17 	call	0x2f04	; 0x2f04 <LCD_clearScreen>
    19dc:	af cd       	rjmp	.-1186   	; 0x153c <Enter_Pass+0x18>
	}
}
    19de:	e9 96       	adiw	r28, 0x39	; 57
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	08 95       	ret

000019f4 <buzzer_handling>:

/* Description: This function sends to the other ECU to enable buzzer
 * when the user enters password wrong 3 times
 */
void buzzer_handling(void) {
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
	Buzzer_Flag++;
    19fc:	80 91 fb 00 	lds	r24, 0x00FB
    1a00:	8f 5f       	subi	r24, 0xFF	; 255
    1a02:	80 93 fb 00 	sts	0x00FB, r24
	if (Buzzer_Flag == ATTEMPTS_BEFORE_BUZZING) {
    1a06:	80 91 fb 00 	lds	r24, 0x00FB
    1a0a:	83 30       	cpi	r24, 0x03	; 3
    1a0c:	29 f4       	brne	.+10     	; 0x1a18 <buzzer_handling+0x24>
		UART_sendByte(BUZZER_ON);
    1a0e:	86 e0       	ldi	r24, 0x06	; 6
    1a10:	0e 94 1c 18 	call	0x3038	; 0x3038 <UART_sendByte>
		Buzzer_Flag = 0;
    1a14:	10 92 fb 00 	sts	0x00FB, r1
	}
}
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <check_pass>:


/*Description: This function check pass entered by the user according
 * to the password saved in the EEPROM
 */
uint8 check_pass(void) {
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	6e 97       	sbiw	r28, 0x1e	; 30
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
	uint8 key; //variable to receive signal from the other ECU via UART
	uint8 i;
	LCD_clearScreen();
    1a36:	0e 94 82 17 	call	0x2f04	; 0x2f04 <LCD_clearScreen>
	LCD_displayString("Enter previous pass:");
    1a3a:	88 e9       	ldi	r24, 0x98	; 152
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_moveCursor>
	for (i = 0; i < PASS_SIZE; i++) {
    1a4a:	1d 8e       	std	Y+29, r1	; 0x1d
    1a4c:	89 c0       	rjmp	.+274    	; 0x1b60 <check_pass+0x142>
		PassPrev[i] = KEYPAD_getPressedKey();
    1a4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a50:	08 2f       	mov	r16, r24
    1a52:	10 e0       	ldi	r17, 0x00	; 0
    1a54:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <KEYPAD_getPressedKey>
    1a58:	f8 01       	movw	r30, r16
    1a5a:	ef 5f       	subi	r30, 0xFF	; 255
    1a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5e:	80 83       	st	Z, r24
		LCD_intgerToString(PassPrev[i]);
    1a60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a62:	88 2f       	mov	r24, r24
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	fc 01       	movw	r30, r24
    1a68:	ef 5f       	subi	r30, 0xFF	; 255
    1a6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a6c:	80 81       	ld	r24, Z
    1a6e:	88 2f       	mov	r24, r24
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <LCD_intgerToString>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	aa ef       	ldi	r26, 0xFA	; 250
    1a7c:	b3 e4       	ldi	r27, 0x43	; 67
    1a7e:	89 8f       	std	Y+25, r24	; 0x19
    1a80:	9a 8f       	std	Y+26, r25	; 0x1a
    1a82:	ab 8f       	std	Y+27, r26	; 0x1b
    1a84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a86:	69 8d       	ldd	r22, Y+25	; 0x19
    1a88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4a ef       	ldi	r20, 0xFA	; 250
    1a94:	54 e4       	ldi	r21, 0x44	; 68
    1a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	8d 8b       	std	Y+21, r24	; 0x15
    1aa0:	9e 8b       	std	Y+22, r25	; 0x16
    1aa2:	af 8b       	std	Y+23, r26	; 0x17
    1aa4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aa6:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    1aac:	98 8d       	ldd	r25, Y+24	; 0x18
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <check_pass+0xaa>
		__ticks = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9c 8b       	std	Y+20, r25	; 0x14
    1ac4:	8b 8b       	std	Y+19, r24	; 0x13
    1ac6:	3f c0       	rjmp	.+126    	; 0x1b46 <check_pass+0x128>
	else if (__tmp > 65535)
    1ac8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aca:	7e 89       	ldd	r23, Y+22	; 0x16
    1acc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ace:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	3f ef       	ldi	r19, 0xFF	; 255
    1ad4:	4f e7       	ldi	r20, 0x7F	; 127
    1ad6:	57 e4       	ldi	r21, 0x47	; 71
    1ad8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	4c f5       	brge	.+82     	; 0x1b32 <check_pass+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ae2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <check_pass+0x10a>
    1b0a:	88 ec       	ldi	r24, 0xC8	; 200
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9a 8b       	std	Y+18, r25	; 0x12
    1b10:	89 8b       	std	Y+17, r24	; 0x11
    1b12:	89 89       	ldd	r24, Y+17	; 0x11
    1b14:	9a 89       	ldd	r25, Y+18	; 0x12
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <check_pass+0xf8>
    1b1a:	9a 8b       	std	Y+18, r25	; 0x12
    1b1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b20:	9c 89       	ldd	r25, Y+20	; 0x14
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	9c 8b       	std	Y+20, r25	; 0x14
    1b26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b28:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	69 f7       	brne	.-38     	; 0x1b0a <check_pass+0xec>
    1b30:	14 c0       	rjmp	.+40     	; 0x1b5a <check_pass+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b32:	6d 89       	ldd	r22, Y+21	; 0x15
    1b34:	7e 89       	ldd	r23, Y+22	; 0x16
    1b36:	8f 89       	ldd	r24, Y+23	; 0x17
    1b38:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9c 8b       	std	Y+20, r25	; 0x14
    1b44:	8b 8b       	std	Y+19, r24	; 0x13
    1b46:	8b 89       	ldd	r24, Y+19	; 0x13
    1b48:	9c 89       	ldd	r25, Y+20	; 0x14
    1b4a:	98 8b       	std	Y+16, r25	; 0x10
    1b4c:	8f 87       	std	Y+15, r24	; 0x0f
    1b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b50:	98 89       	ldd	r25, Y+16	; 0x10
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <check_pass+0x134>
    1b56:	98 8b       	std	Y+16, r25	; 0x10
    1b58:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 key; //variable to receive signal from the other ECU via UART
	uint8 i;
	LCD_clearScreen();
	LCD_displayString("Enter previous pass:");
	LCD_moveCursor(1, 0);
	for (i = 0; i < PASS_SIZE; i++) {
    1b5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b5c:	8f 5f       	subi	r24, 0xFF	; 255
    1b5e:	8d 8f       	std	Y+29, r24	; 0x1d
    1b60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b62:	85 30       	cpi	r24, 0x05	; 5
    1b64:	08 f4       	brcc	.+2      	; 0x1b68 <check_pass+0x14a>
    1b66:	73 cf       	rjmp	.-282    	; 0x1a4e <check_pass+0x30>
		_delay_ms(500);
	}
	/* send signal to the ECU to check pass with the one saved in the EEPROM
	 * and send the password to check to the other ECU via UART
	 */
	UART_sendByte(CHECK_PASS);
    1b68:	88 e0       	ldi	r24, 0x08	; 8
    1b6a:	0e 94 1c 18 	call	0x3038	; 0x3038 <UART_sendByte>
	for (i = 0; i < PASS_SIZE; i++) {
    1b6e:	1d 8e       	std	Y+29, r1	; 0x1d
    1b70:	7e c0       	rjmp	.+252    	; 0x1c6e <check_pass+0x250>
		UART_sendByte(PassPrev[i]);
    1b72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b74:	88 2f       	mov	r24, r24
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	fc 01       	movw	r30, r24
    1b7a:	ef 5f       	subi	r30, 0xFF	; 255
    1b7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b7e:	80 81       	ld	r24, Z
    1b80:	0e 94 1c 18 	call	0x3038	; 0x3038 <UART_sendByte>
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a0 e2       	ldi	r26, 0x20	; 32
    1b8a:	b1 e4       	ldi	r27, 0x41	; 65
    1b8c:	8b 87       	std	Y+11, r24	; 0x0b
    1b8e:	9c 87       	std	Y+12, r25	; 0x0c
    1b90:	ad 87       	std	Y+13, r26	; 0x0d
    1b92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	4a ef       	ldi	r20, 0xFA	; 250
    1ba2:	54 e4       	ldi	r21, 0x44	; 68
    1ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8f 83       	std	Y+7, r24	; 0x07
    1bae:	98 87       	std	Y+8, r25	; 0x08
    1bb0:	a9 87       	std	Y+9, r26	; 0x09
    1bb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb6:	78 85       	ldd	r23, Y+8	; 0x08
    1bb8:	89 85       	ldd	r24, Y+9	; 0x09
    1bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e8       	ldi	r20, 0x80	; 128
    1bc2:	5f e3       	ldi	r21, 0x3F	; 63
    1bc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc8:	88 23       	and	r24, r24
    1bca:	2c f4       	brge	.+10     	; 0x1bd6 <check_pass+0x1b8>
		__ticks = 1;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	3f c0       	rjmp	.+126    	; 0x1c54 <check_pass+0x236>
	else if (__tmp > 65535)
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	4f e7       	ldi	r20, 0x7F	; 127
    1be4:	57 e4       	ldi	r21, 0x47	; 71
    1be6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bea:	18 16       	cp	r1, r24
    1bec:	4c f5       	brge	.+82     	; 0x1c40 <check_pass+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	40 e2       	ldi	r20, 0x20	; 32
    1bfc:	51 e4       	ldi	r21, 0x41	; 65
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	bc 01       	movw	r22, r24
    1c08:	cd 01       	movw	r24, r26
    1c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	9e 83       	std	Y+6, r25	; 0x06
    1c14:	8d 83       	std	Y+5, r24	; 0x05
    1c16:	0f c0       	rjmp	.+30     	; 0x1c36 <check_pass+0x218>
    1c18:	88 ec       	ldi	r24, 0xC8	; 200
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9c 83       	std	Y+4, r25	; 0x04
    1c1e:	8b 83       	std	Y+3, r24	; 0x03
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <check_pass+0x206>
    1c28:	9c 83       	std	Y+4, r25	; 0x04
    1c2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c36:	8d 81       	ldd	r24, Y+5	; 0x05
    1c38:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	69 f7       	brne	.-38     	; 0x1c18 <check_pass+0x1fa>
    1c3e:	14 c0       	rjmp	.+40     	; 0x1c68 <check_pass+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	9e 83       	std	Y+6, r25	; 0x06
    1c52:	8d 83       	std	Y+5, r24	; 0x05
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	9e 81       	ldd	r25, Y+6	; 0x06
    1c58:	9a 83       	std	Y+2, r25	; 0x02
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <check_pass+0x242>
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	89 83       	std	Y+1, r24	; 0x01
	}
	/* send signal to the ECU to check pass with the one saved in the EEPROM
	 * and send the password to check to the other ECU via UART
	 */
	UART_sendByte(CHECK_PASS);
	for (i = 0; i < PASS_SIZE; i++) {
    1c68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c6a:	8f 5f       	subi	r24, 0xFF	; 255
    1c6c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c70:	85 30       	cpi	r24, 0x05	; 5
    1c72:	08 f4       	brcc	.+2      	; 0x1c76 <check_pass+0x258>
    1c74:	7e cf       	rjmp	.-260    	; 0x1b72 <check_pass+0x154>
		UART_sendByte(PassPrev[i]);
		_delay_ms(10);
	}
	/* receive whether the password is correct or wrong*/
	key = UART_recieveByte();
    1c76:	0e 94 33 18 	call	0x3066	; 0x3066 <UART_recieveByte>
    1c7a:	8e 8f       	std	Y+30, r24	; 0x1e
	return (key);
    1c7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    1c7e:	6e 96       	adiw	r28, 0x1e	; 30
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	08 95       	ret

00001c94 <change_pass>:
 * it asks the user to enter the old password, it checks it
 * with the one in the EEPROM, if it's correct it allows user
 * to change password , if it's wrong for 3 times, it sends
 * signal to trigger Buzzer
 */
void change_pass(void) {
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	63 97       	sbiw	r28, 0x13	; 19
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
	uint8 flag=0; //flag to get out of the for loop if the pass is correct
    1ca8:	19 8a       	std	Y+17, r1	; 0x11
	uint8 key; //to receive whether the password entered is right or wrong
for (uint8 i=0;i<ATTEMPTS_BEFORE_BUZZING;i++){
    1caa:	1f 86       	std	Y+15, r1	; 0x0f
    1cac:	98 c0       	rjmp	.+304    	; 0x1dde <change_pass+0x14a>
	key=check_pass();
    1cae:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <check_pass>
    1cb2:	88 8b       	std	Y+16, r24	; 0x10
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a8 ec       	ldi	r26, 0xC8	; 200
    1cba:	b2 e4       	ldi	r27, 0x42	; 66
    1cbc:	8b 87       	std	Y+11, r24	; 0x0b
    1cbe:	9c 87       	std	Y+12, r25	; 0x0c
    1cc0:	ad 87       	std	Y+13, r26	; 0x0d
    1cc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	4a ef       	ldi	r20, 0xFA	; 250
    1cd2:	54 e4       	ldi	r21, 0x44	; 68
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	8f 83       	std	Y+7, r24	; 0x07
    1cde:	98 87       	std	Y+8, r25	; 0x08
    1ce0:	a9 87       	std	Y+9, r26	; 0x09
    1ce2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce6:	78 85       	ldd	r23, Y+8	; 0x08
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e8       	ldi	r20, 0x80	; 128
    1cf2:	5f e3       	ldi	r21, 0x3F	; 63
    1cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf8:	88 23       	and	r24, r24
    1cfa:	2c f4       	brge	.+10     	; 0x1d06 <change_pass+0x72>
		__ticks = 1;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	9e 83       	std	Y+6, r25	; 0x06
    1d02:	8d 83       	std	Y+5, r24	; 0x05
    1d04:	3f c0       	rjmp	.+126    	; 0x1d84 <change_pass+0xf0>
	else if (__tmp > 65535)
    1d06:	6f 81       	ldd	r22, Y+7	; 0x07
    1d08:	78 85       	ldd	r23, Y+8	; 0x08
    1d0a:	89 85       	ldd	r24, Y+9	; 0x09
    1d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	3f ef       	ldi	r19, 0xFF	; 255
    1d12:	4f e7       	ldi	r20, 0x7F	; 127
    1d14:	57 e4       	ldi	r21, 0x47	; 71
    1d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d1a:	18 16       	cp	r1, r24
    1d1c:	4c f5       	brge	.+82     	; 0x1d70 <change_pass+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e2       	ldi	r20, 0x20	; 32
    1d2c:	51 e4       	ldi	r21, 0x41	; 65
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9e 83       	std	Y+6, r25	; 0x06
    1d44:	8d 83       	std	Y+5, r24	; 0x05
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <change_pass+0xd2>
    1d48:	88 ec       	ldi	r24, 0xC8	; 200
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9c 83       	std	Y+4, r25	; 0x04
    1d4e:	8b 83       	std	Y+3, r24	; 0x03
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <change_pass+0xc0>
    1d58:	9c 83       	std	Y+4, r25	; 0x04
    1d5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	69 f7       	brne	.-38     	; 0x1d48 <change_pass+0xb4>
    1d6e:	14 c0       	rjmp	.+40     	; 0x1d98 <change_pass+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d70:	6f 81       	ldd	r22, Y+7	; 0x07
    1d72:	78 85       	ldd	r23, Y+8	; 0x08
    1d74:	89 85       	ldd	r24, Y+9	; 0x09
    1d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
    1d84:	8d 81       	ldd	r24, Y+5	; 0x05
    1d86:	9e 81       	ldd	r25, Y+6	; 0x06
    1d88:	9a 83       	std	Y+2, r25	; 0x02
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <change_pass+0xfc>
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	switch (key) {
    1d98:	88 89       	ldd	r24, Y+16	; 0x10
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	3b 8b       	std	Y+19, r19	; 0x13
    1da0:	2a 8b       	std	Y+18, r18	; 0x12
    1da2:	8a 89       	ldd	r24, Y+18	; 0x12
    1da4:	9b 89       	ldd	r25, Y+19	; 0x13
    1da6:	83 30       	cpi	r24, 0x03	; 3
    1da8:	91 05       	cpc	r25, r1
    1daa:	31 f0       	breq	.+12     	; 0x1db8 <change_pass+0x124>
    1dac:	2a 89       	ldd	r18, Y+18	; 0x12
    1dae:	3b 89       	ldd	r19, Y+19	; 0x13
    1db0:	20 31       	cpi	r18, 0x10	; 16
    1db2:	31 05       	cpc	r19, r1
    1db4:	51 f0       	breq	.+20     	; 0x1dca <change_pass+0x136>
    1db6:	0b c0       	rjmp	.+22     	; 0x1dce <change_pass+0x13a>
	case CORRECT_PASS:
		Buzzer_Flag=0;
    1db8:	10 92 fb 00 	sts	0x00FB, r1
		flag=1; //to get out of the for loop
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	89 8b       	std	Y+17, r24	; 0x11
		LCD_clearScreen();
    1dc0:	0e 94 82 17 	call	0x2f04	; 0x2f04 <LCD_clearScreen>
		Enter_Pass(); //enable to the user to enter new pass
    1dc4:	0e 94 92 0a 	call	0x1524	; 0x1524 <Enter_Pass>
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <change_pass+0x13a>
		break;
	case WRONG_PASS:
		buzzer_handling();
    1dca:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <buzzer_handling>

		break;
	}
	if (flag==1){
    1dce:	89 89       	ldd	r24, Y+17	; 0x11
    1dd0:	81 30       	cpi	r24, 0x01	; 1
    1dd2:	11 f4       	brne	.+4      	; 0x1dd8 <change_pass+0x144>
		//correct password so get out of the for loop
		flag=0;
    1dd4:	19 8a       	std	Y+17, r1	; 0x11
    1dd6:	07 c0       	rjmp	.+14     	; 0x1de6 <change_pass+0x152>
 * signal to trigger Buzzer
 */
void change_pass(void) {
	uint8 flag=0; //flag to get out of the for loop if the pass is correct
	uint8 key; //to receive whether the password entered is right or wrong
for (uint8 i=0;i<ATTEMPTS_BEFORE_BUZZING;i++){
    1dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dda:	8f 5f       	subi	r24, 0xFF	; 255
    1ddc:	8f 87       	std	Y+15, r24	; 0x0f
    1dde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de0:	83 30       	cpi	r24, 0x03	; 3
    1de2:	08 f4       	brcc	.+2      	; 0x1de6 <change_pass+0x152>
    1de4:	64 cf       	rjmp	.-312    	; 0x1cae <change_pass+0x1a>
		flag=0;
		break;
	}

}
}
    1de6:	63 96       	adiw	r28, 0x13	; 19
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <handle_door>:
/* Description: Function that handles when the user wants to open the door
 * it displays when the door is opening and closing and it checks the
 * password entered before this
 */

void handle_door(void) {
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	a1 97       	sbiw	r28, 0x21	; 33
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
	uint8 flag = 0; //variable to get out of the for loop when password is correct
    1e0c:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 checker=0;  // to receive whether correct pass or incorrect
    1e0e:	1e 8e       	std	Y+30, r1	; 0x1e
	for (uint8 i = 0; i < ATTEMPTS_BEFORE_BUZZING; i++) {
    1e10:	1d 8e       	std	Y+29, r1	; 0x1d
    1e12:	20 c1       	rjmp	.+576    	; 0x2054 <handle_door+0x25c>

		checker= check_pass();
    1e14:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <check_pass>
    1e18:	8e 8f       	std	Y+30, r24	; 0x1e

		switch (checker) {
    1e1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	39 a3       	std	Y+33, r19	; 0x21
    1e22:	28 a3       	std	Y+32, r18	; 0x20
    1e24:	88 a1       	ldd	r24, Y+32	; 0x20
    1e26:	99 a1       	ldd	r25, Y+33	; 0x21
    1e28:	83 30       	cpi	r24, 0x03	; 3
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	39 f0       	breq	.+14     	; 0x1e3c <handle_door+0x44>
    1e2e:	28 a1       	ldd	r18, Y+32	; 0x20
    1e30:	39 a1       	ldd	r19, Y+33	; 0x21
    1e32:	20 31       	cpi	r18, 0x10	; 16
    1e34:	31 05       	cpc	r19, r1
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <handle_door+0x42>
    1e38:	8f c0       	rjmp	.+286    	; 0x1f58 <handle_door+0x160>
    1e3a:	04 c1       	rjmp	.+520    	; 0x2044 <handle_door+0x24c>
		case CORRECT_PASS:
			Buzzer_Flag = 0;
    1e3c:	10 92 fb 00 	sts	0x00FB, r1
			flag = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	8f 8f       	std	Y+31, r24	; 0x1f
			UART_sendByte(OPEN_DOOR);
    1e44:	82 e1       	ldi	r24, 0x12	; 18
    1e46:	0e 94 1c 18 	call	0x3038	; 0x3038 <UART_sendByte>
			LCD_clearScreen();
    1e4a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <LCD_clearScreen>
			LCD_displayString("Door Opening");
    1e4e:	8d ea       	ldi	r24, 0xAD	; 173
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayString>
			Timer0_Delay(15);
    1e56:	8f e0       	ldi	r24, 0x0F	; 15
    1e58:	0e 94 a4 06 	call	0xd48	; 0xd48 <Timer0_Delay>
			LCD_clearScreen();
    1e5c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <LCD_clearScreen>
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	aa ef       	ldi	r26, 0xFA	; 250
    1e66:	b3 e4       	ldi	r27, 0x43	; 67
    1e68:	89 8f       	std	Y+25, r24	; 0x19
    1e6a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e6c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e70:	69 8d       	ldd	r22, Y+25	; 0x19
    1e72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	4a ef       	ldi	r20, 0xFA	; 250
    1e7e:	54 e4       	ldi	r21, 0x44	; 68
    1e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	8d 8b       	std	Y+21, r24	; 0x15
    1e8a:	9e 8b       	std	Y+22, r25	; 0x16
    1e8c:	af 8b       	std	Y+23, r26	; 0x17
    1e8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e90:	6d 89       	ldd	r22, Y+21	; 0x15
    1e92:	7e 89       	ldd	r23, Y+22	; 0x16
    1e94:	8f 89       	ldd	r24, Y+23	; 0x17
    1e96:	98 8d       	ldd	r25, Y+24	; 0x18
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	2c f4       	brge	.+10     	; 0x1eb2 <handle_door+0xba>
		__ticks = 1;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	9c 8b       	std	Y+20, r25	; 0x14
    1eae:	8b 8b       	std	Y+19, r24	; 0x13
    1eb0:	3f c0       	rjmp	.+126    	; 0x1f30 <handle_door+0x138>
	else if (__tmp > 65535)
    1eb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	3f ef       	ldi	r19, 0xFF	; 255
    1ebe:	4f e7       	ldi	r20, 0x7F	; 127
    1ec0:	57 e4       	ldi	r21, 0x47	; 71
    1ec2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec6:	18 16       	cp	r1, r24
    1ec8:	4c f5       	brge	.+82     	; 0x1f1c <handle_door+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eca:	69 8d       	ldd	r22, Y+25	; 0x19
    1ecc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ece:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e2       	ldi	r20, 0x20	; 32
    1ed8:	51 e4       	ldi	r21, 0x41	; 65
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	9c 8b       	std	Y+20, r25	; 0x14
    1ef0:	8b 8b       	std	Y+19, r24	; 0x13
    1ef2:	0f c0       	rjmp	.+30     	; 0x1f12 <handle_door+0x11a>
    1ef4:	88 ec       	ldi	r24, 0xC8	; 200
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9a 8b       	std	Y+18, r25	; 0x12
    1efa:	89 8b       	std	Y+17, r24	; 0x11
    1efc:	89 89       	ldd	r24, Y+17	; 0x11
    1efe:	9a 89       	ldd	r25, Y+18	; 0x12
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <handle_door+0x108>
    1f04:	9a 8b       	std	Y+18, r25	; 0x12
    1f06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f08:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	9c 8b       	std	Y+20, r25	; 0x14
    1f10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f12:	8b 89       	ldd	r24, Y+19	; 0x13
    1f14:	9c 89       	ldd	r25, Y+20	; 0x14
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	69 f7       	brne	.-38     	; 0x1ef4 <handle_door+0xfc>
    1f1a:	14 c0       	rjmp	.+40     	; 0x1f44 <handle_door+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f20:	8f 89       	ldd	r24, Y+23	; 0x17
    1f22:	98 8d       	ldd	r25, Y+24	; 0x18
    1f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9c 8b       	std	Y+20, r25	; 0x14
    1f2e:	8b 8b       	std	Y+19, r24	; 0x13
    1f30:	8b 89       	ldd	r24, Y+19	; 0x13
    1f32:	9c 89       	ldd	r25, Y+20	; 0x14
    1f34:	98 8b       	std	Y+16, r25	; 0x10
    1f36:	8f 87       	std	Y+15, r24	; 0x0f
    1f38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3a:	98 89       	ldd	r25, Y+16	; 0x10
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <handle_door+0x144>
    1f40:	98 8b       	std	Y+16, r25	; 0x10
    1f42:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LCD_displayString("Door Closing");
    1f44:	8a eb       	ldi	r24, 0xBA	; 186
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayString>
			Timer0_Delay(15);
    1f4c:	8f e0       	ldi	r24, 0x0F	; 15
    1f4e:	0e 94 a4 06 	call	0xd48	; 0xd48 <Timer0_Delay>
			LCD_clearScreen();
    1f52:	0e 94 82 17 	call	0x2f04	; 0x2f04 <LCD_clearScreen>
    1f56:	76 c0       	rjmp	.+236    	; 0x2044 <handle_door+0x24c>
			break;
		case WRONG_PASS:
			LCD_clearScreen();
    1f58:	0e 94 82 17 	call	0x2f04	; 0x2f04 <LCD_clearScreen>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	aa ef       	ldi	r26, 0xFA	; 250
    1f62:	b3 e4       	ldi	r27, 0x43	; 67
    1f64:	8b 87       	std	Y+11, r24	; 0x0b
    1f66:	9c 87       	std	Y+12, r25	; 0x0c
    1f68:	ad 87       	std	Y+13, r26	; 0x0d
    1f6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	4a ef       	ldi	r20, 0xFA	; 250
    1f7a:	54 e4       	ldi	r21, 0x44	; 68
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	8f 83       	std	Y+7, r24	; 0x07
    1f86:	98 87       	std	Y+8, r25	; 0x08
    1f88:	a9 87       	std	Y+9, r26	; 0x09
    1f8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8e:	78 85       	ldd	r23, Y+8	; 0x08
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e8       	ldi	r20, 0x80	; 128
    1f9a:	5f e3       	ldi	r21, 0x3F	; 63
    1f9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa0:	88 23       	and	r24, r24
    1fa2:	2c f4       	brge	.+10     	; 0x1fae <handle_door+0x1b6>
		__ticks = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	9e 83       	std	Y+6, r25	; 0x06
    1faa:	8d 83       	std	Y+5, r24	; 0x05
    1fac:	3f c0       	rjmp	.+126    	; 0x202c <handle_door+0x234>
	else if (__tmp > 65535)
    1fae:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb0:	78 85       	ldd	r23, Y+8	; 0x08
    1fb2:	89 85       	ldd	r24, Y+9	; 0x09
    1fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	3f ef       	ldi	r19, 0xFF	; 255
    1fba:	4f e7       	ldi	r20, 0x7F	; 127
    1fbc:	57 e4       	ldi	r21, 0x47	; 71
    1fbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc2:	18 16       	cp	r1, r24
    1fc4:	4c f5       	brge	.+82     	; 0x2018 <handle_door+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e2       	ldi	r20, 0x20	; 32
    1fd4:	51 e4       	ldi	r21, 0x41	; 65
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <handle_door+0x216>
    1ff0:	88 ec       	ldi	r24, 0xC8	; 200
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9c 83       	std	Y+4, r25	; 0x04
    1ff6:	8b 83       	std	Y+3, r24	; 0x03
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <handle_door+0x204>
    2000:	9c 83       	std	Y+4, r25	; 0x04
    2002:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2004:	8d 81       	ldd	r24, Y+5	; 0x05
    2006:	9e 81       	ldd	r25, Y+6	; 0x06
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	69 f7       	brne	.-38     	; 0x1ff0 <handle_door+0x1f8>
    2016:	14 c0       	rjmp	.+40     	; 0x2040 <handle_door+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2018:	6f 81       	ldd	r22, Y+7	; 0x07
    201a:	78 85       	ldd	r23, Y+8	; 0x08
    201c:	89 85       	ldd	r24, Y+9	; 0x09
    201e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	9e 83       	std	Y+6, r25	; 0x06
    202a:	8d 83       	std	Y+5, r24	; 0x05
    202c:	8d 81       	ldd	r24, Y+5	; 0x05
    202e:	9e 81       	ldd	r25, Y+6	; 0x06
    2030:	9a 83       	std	Y+2, r25	; 0x02
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	9a 81       	ldd	r25, Y+2	; 0x02
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <handle_door+0x240>
    203c:	9a 83       	std	Y+2, r25	; 0x02
    203e:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(500);
			buzzer_handling();
    2040:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <buzzer_handling>

			break;
		}

		if (flag == 1) {
    2044:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2046:	81 30       	cpi	r24, 0x01	; 1
    2048:	11 f4       	brne	.+4      	; 0x204e <handle_door+0x256>
			flag = 0;
    204a:	1f 8e       	std	Y+31, r1	; 0x1f
    204c:	07 c0       	rjmp	.+14     	; 0x205c <handle_door+0x264>
 */

void handle_door(void) {
	uint8 flag = 0; //variable to get out of the for loop when password is correct
	uint8 checker=0;  // to receive whether correct pass or incorrect
	for (uint8 i = 0; i < ATTEMPTS_BEFORE_BUZZING; i++) {
    204e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2050:	8f 5f       	subi	r24, 0xFF	; 255
    2052:	8d 8f       	std	Y+29, r24	; 0x1d
    2054:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2056:	83 30       	cpi	r24, 0x03	; 3
    2058:	08 f4       	brcc	.+2      	; 0x205c <handle_door+0x264>
    205a:	dc ce       	rjmp	.-584    	; 0x1e14 <handle_door+0x1c>
		if (flag == 1) {
			flag = 0;
			break;
		}
	}
}
    205c:	a1 96       	adiw	r28, 0x21	; 33
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <options>:

/* Description: This Function gives options to the user to open door or
 * to change pass , and it receives the answer from the user, and it
 * processes according to this answer
 */
void options(void) {
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	6e 97       	sbiw	r28, 0x1e	; 30
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2082:	0e 94 82 17 	call	0x2f04	; 0x2f04 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    2086:	27 ec       	ldi	r18, 0xC7	; 199
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	a9 01       	movw	r20, r18
    2090:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "-: Change Pass");
    2094:	25 ed       	ldi	r18, 0xD5	; 213
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	60 e0       	ldi	r22, 0x00	; 0
    209c:	a9 01       	movw	r20, r18
    209e:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <LCD_displayStringRowColumn>

	switch (KEYPAD_getPressedKey()) {
    20a2:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <KEYPAD_getPressedKey>
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	3e 8f       	std	Y+30, r19	; 0x1e
    20ac:	2d 8f       	std	Y+29, r18	; 0x1d
    20ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20b2:	8b 32       	cpi	r24, 0x2B	; 43
    20b4:	91 05       	cpc	r25, r1
    20b6:	09 f4       	brne	.+2      	; 0x20ba <options+0x4c>
    20b8:	7b c0       	rjmp	.+246    	; 0x21b0 <options+0x142>
    20ba:	2d 8d       	ldd	r18, Y+29	; 0x1d
    20bc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    20be:	2d 32       	cpi	r18, 0x2D	; 45
    20c0:	31 05       	cpc	r19, r1
    20c2:	09 f0       	breq	.+2      	; 0x20c6 <options+0x58>
    20c4:	e9 c0       	rjmp	.+466    	; 0x2298 <options+0x22a>
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	aa ef       	ldi	r26, 0xFA	; 250
    20cc:	b3 e4       	ldi	r27, 0x43	; 67
    20ce:	89 8f       	std	Y+25, r24	; 0x19
    20d0:	9a 8f       	std	Y+26, r25	; 0x1a
    20d2:	ab 8f       	std	Y+27, r26	; 0x1b
    20d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d6:	69 8d       	ldd	r22, Y+25	; 0x19
    20d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	4a ef       	ldi	r20, 0xFA	; 250
    20e4:	54 e4       	ldi	r21, 0x44	; 68
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	8d 8b       	std	Y+21, r24	; 0x15
    20f0:	9e 8b       	std	Y+22, r25	; 0x16
    20f2:	af 8b       	std	Y+23, r26	; 0x17
    20f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20f6:	6d 89       	ldd	r22, Y+21	; 0x15
    20f8:	7e 89       	ldd	r23, Y+22	; 0x16
    20fa:	8f 89       	ldd	r24, Y+23	; 0x17
    20fc:	98 8d       	ldd	r25, Y+24	; 0x18
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e8       	ldi	r20, 0x80	; 128
    2104:	5f e3       	ldi	r21, 0x3F	; 63
    2106:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    210a:	88 23       	and	r24, r24
    210c:	2c f4       	brge	.+10     	; 0x2118 <options+0xaa>
		__ticks = 1;
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	9c 8b       	std	Y+20, r25	; 0x14
    2114:	8b 8b       	std	Y+19, r24	; 0x13
    2116:	3f c0       	rjmp	.+126    	; 0x2196 <options+0x128>
	else if (__tmp > 65535)
    2118:	6d 89       	ldd	r22, Y+21	; 0x15
    211a:	7e 89       	ldd	r23, Y+22	; 0x16
    211c:	8f 89       	ldd	r24, Y+23	; 0x17
    211e:	98 8d       	ldd	r25, Y+24	; 0x18
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	3f ef       	ldi	r19, 0xFF	; 255
    2124:	4f e7       	ldi	r20, 0x7F	; 127
    2126:	57 e4       	ldi	r21, 0x47	; 71
    2128:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    212c:	18 16       	cp	r1, r24
    212e:	4c f5       	brge	.+82     	; 0x2182 <options+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2130:	69 8d       	ldd	r22, Y+25	; 0x19
    2132:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2134:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2136:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e2       	ldi	r20, 0x20	; 32
    213e:	51 e4       	ldi	r21, 0x41	; 65
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	bc 01       	movw	r22, r24
    214a:	cd 01       	movw	r24, r26
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	9c 8b       	std	Y+20, r25	; 0x14
    2156:	8b 8b       	std	Y+19, r24	; 0x13
    2158:	0f c0       	rjmp	.+30     	; 0x2178 <options+0x10a>
    215a:	88 ec       	ldi	r24, 0xC8	; 200
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9a 8b       	std	Y+18, r25	; 0x12
    2160:	89 8b       	std	Y+17, r24	; 0x11
    2162:	89 89       	ldd	r24, Y+17	; 0x11
    2164:	9a 89       	ldd	r25, Y+18	; 0x12
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	f1 f7       	brne	.-4      	; 0x2166 <options+0xf8>
    216a:	9a 8b       	std	Y+18, r25	; 0x12
    216c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216e:	8b 89       	ldd	r24, Y+19	; 0x13
    2170:	9c 89       	ldd	r25, Y+20	; 0x14
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	9c 8b       	std	Y+20, r25	; 0x14
    2176:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2178:	8b 89       	ldd	r24, Y+19	; 0x13
    217a:	9c 89       	ldd	r25, Y+20	; 0x14
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	69 f7       	brne	.-38     	; 0x215a <options+0xec>
    2180:	14 c0       	rjmp	.+40     	; 0x21aa <options+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2182:	6d 89       	ldd	r22, Y+21	; 0x15
    2184:	7e 89       	ldd	r23, Y+22	; 0x16
    2186:	8f 89       	ldd	r24, Y+23	; 0x17
    2188:	98 8d       	ldd	r25, Y+24	; 0x18
    218a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	9c 8b       	std	Y+20, r25	; 0x14
    2194:	8b 8b       	std	Y+19, r24	; 0x13
    2196:	8b 89       	ldd	r24, Y+19	; 0x13
    2198:	9c 89       	ldd	r25, Y+20	; 0x14
    219a:	98 8b       	std	Y+16, r25	; 0x10
    219c:	8f 87       	std	Y+15, r24	; 0x0f
    219e:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a0:	98 89       	ldd	r25, Y+16	; 0x10
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <options+0x134>
    21a6:	98 8b       	std	Y+16, r25	; 0x10
    21a8:	8f 87       	std	Y+15, r24	; 0x0f

	case '-': //change password
		_delay_ms(500);
		change_pass();
    21aa:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <change_pass>
    21ae:	74 c0       	rjmp	.+232    	; 0x2298 <options+0x22a>
		break;
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	aa ef       	ldi	r26, 0xFA	; 250
    21b6:	b3 e4       	ldi	r27, 0x43	; 67
    21b8:	8b 87       	std	Y+11, r24	; 0x0b
    21ba:	9c 87       	std	Y+12, r25	; 0x0c
    21bc:	ad 87       	std	Y+13, r26	; 0x0d
    21be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	4a ef       	ldi	r20, 0xFA	; 250
    21ce:	54 e4       	ldi	r21, 0x44	; 68
    21d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	8f 83       	std	Y+7, r24	; 0x07
    21da:	98 87       	std	Y+8, r25	; 0x08
    21dc:	a9 87       	std	Y+9, r26	; 0x09
    21de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e0:	6f 81       	ldd	r22, Y+7	; 0x07
    21e2:	78 85       	ldd	r23, Y+8	; 0x08
    21e4:	89 85       	ldd	r24, Y+9	; 0x09
    21e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e8       	ldi	r20, 0x80	; 128
    21ee:	5f e3       	ldi	r21, 0x3F	; 63
    21f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f4:	88 23       	and	r24, r24
    21f6:	2c f4       	brge	.+10     	; 0x2202 <options+0x194>
		__ticks = 1;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9e 83       	std	Y+6, r25	; 0x06
    21fe:	8d 83       	std	Y+5, r24	; 0x05
    2200:	3f c0       	rjmp	.+126    	; 0x2280 <options+0x212>
	else if (__tmp > 65535)
    2202:	6f 81       	ldd	r22, Y+7	; 0x07
    2204:	78 85       	ldd	r23, Y+8	; 0x08
    2206:	89 85       	ldd	r24, Y+9	; 0x09
    2208:	9a 85       	ldd	r25, Y+10	; 0x0a
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	3f ef       	ldi	r19, 0xFF	; 255
    220e:	4f e7       	ldi	r20, 0x7F	; 127
    2210:	57 e4       	ldi	r21, 0x47	; 71
    2212:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2216:	18 16       	cp	r1, r24
    2218:	4c f5       	brge	.+82     	; 0x226c <options+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221a:	6b 85       	ldd	r22, Y+11	; 0x0b
    221c:	7c 85       	ldd	r23, Y+12	; 0x0c
    221e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2220:	9e 85       	ldd	r25, Y+14	; 0x0e
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e2       	ldi	r20, 0x20	; 32
    2228:	51 e4       	ldi	r21, 0x41	; 65
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	bc 01       	movw	r22, r24
    2234:	cd 01       	movw	r24, r26
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
    2242:	0f c0       	rjmp	.+30     	; 0x2262 <options+0x1f4>
    2244:	88 ec       	ldi	r24, 0xC8	; 200
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	9c 83       	std	Y+4, r25	; 0x04
    224a:	8b 83       	std	Y+3, r24	; 0x03
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <options+0x1e2>
    2254:	9c 83       	std	Y+4, r25	; 0x04
    2256:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2258:	8d 81       	ldd	r24, Y+5	; 0x05
    225a:	9e 81       	ldd	r25, Y+6	; 0x06
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	9e 81       	ldd	r25, Y+6	; 0x06
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	69 f7       	brne	.-38     	; 0x2244 <options+0x1d6>
    226a:	14 c0       	rjmp	.+40     	; 0x2294 <options+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226c:	6f 81       	ldd	r22, Y+7	; 0x07
    226e:	78 85       	ldd	r23, Y+8	; 0x08
    2270:	89 85       	ldd	r24, Y+9	; 0x09
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	9e 83       	std	Y+6, r25	; 0x06
    227e:	8d 83       	std	Y+5, r24	; 0x05
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <options+0x21e>
    2290:	9a 83       	std	Y+2, r25	; 0x02
    2292:	89 83       	std	Y+1, r24	; 0x01
	case '+': //open door
		_delay_ms(500);
		handle_door();
    2294:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <handle_door>
		break;
	}

}
    2298:	6e 96       	adiw	r28, 0x1e	; 30
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <main>:


int main(void) {
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	2e 97       	sbiw	r28, 0x0e	; 14
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
	init();
    22be:	0e 94 35 0a 	call	0x146a	; 0x146a <init>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a8 e4       	ldi	r26, 0x48	; 72
    22c8:	b2 e4       	ldi	r27, 0x42	; 66
    22ca:	8b 87       	std	Y+11, r24	; 0x0b
    22cc:	9c 87       	std	Y+12, r25	; 0x0c
    22ce:	ad 87       	std	Y+13, r26	; 0x0d
    22d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a ef       	ldi	r20, 0xFA	; 250
    22e0:	54 e4       	ldi	r21, 0x44	; 68
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8f 83       	std	Y+7, r24	; 0x07
    22ec:	98 87       	std	Y+8, r25	; 0x08
    22ee:	a9 87       	std	Y+9, r26	; 0x09
    22f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22f2:	6f 81       	ldd	r22, Y+7	; 0x07
    22f4:	78 85       	ldd	r23, Y+8	; 0x08
    22f6:	89 85       	ldd	r24, Y+9	; 0x09
    22f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	2c f4       	brge	.+10     	; 0x2314 <main+0x6a>
		__ticks = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9e 83       	std	Y+6, r25	; 0x06
    2310:	8d 83       	std	Y+5, r24	; 0x05
    2312:	3f c0       	rjmp	.+126    	; 0x2392 <main+0xe8>
	else if (__tmp > 65535)
    2314:	6f 81       	ldd	r22, Y+7	; 0x07
    2316:	78 85       	ldd	r23, Y+8	; 0x08
    2318:	89 85       	ldd	r24, Y+9	; 0x09
    231a:	9a 85       	ldd	r25, Y+10	; 0x0a
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	3f ef       	ldi	r19, 0xFF	; 255
    2320:	4f e7       	ldi	r20, 0x7F	; 127
    2322:	57 e4       	ldi	r21, 0x47	; 71
    2324:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2328:	18 16       	cp	r1, r24
    232a:	4c f5       	brge	.+82     	; 0x237e <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232c:	6b 85       	ldd	r22, Y+11	; 0x0b
    232e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2330:	8d 85       	ldd	r24, Y+13	; 0x0d
    2332:	9e 85       	ldd	r25, Y+14	; 0x0e
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e2       	ldi	r20, 0x20	; 32
    233a:	51 e4       	ldi	r21, 0x41	; 65
    233c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9e 83       	std	Y+6, r25	; 0x06
    2352:	8d 83       	std	Y+5, r24	; 0x05
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <main+0xca>
    2356:	88 ec       	ldi	r24, 0xC8	; 200
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9c 83       	std	Y+4, r25	; 0x04
    235c:	8b 83       	std	Y+3, r24	; 0x03
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <main+0xb8>
    2366:	9c 83       	std	Y+4, r25	; 0x04
    2368:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236a:	8d 81       	ldd	r24, Y+5	; 0x05
    236c:	9e 81       	ldd	r25, Y+6	; 0x06
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	69 f7       	brne	.-38     	; 0x2356 <main+0xac>
    237c:	14 c0       	rjmp	.+40     	; 0x23a6 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9e 83       	std	Y+6, r25	; 0x06
    2390:	8d 83       	std	Y+5, r24	; 0x05
    2392:	8d 81       	ldd	r24, Y+5	; 0x05
    2394:	9e 81       	ldd	r25, Y+6	; 0x06
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <main+0xf4>
    23a2:	9a 83       	std	Y+2, r25	; 0x02
    23a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	Enter_Pass();
    23a6:	0e 94 92 0a 	call	0x1524	; 0x1524 <Enter_Pass>
	while (1) {

		options();
    23aa:	0e 94 37 10 	call	0x206e	; 0x206e <options>
    23ae:	fd cf       	rjmp	.-6      	; 0x23aa <main+0x100>

000023b0 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <KEYPAD_getPressedKey+0x6>
    23b6:	0f 92       	push	r0
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    23bc:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    23be:	1b 82       	std	Y+3, r1	; 0x03
    23c0:	43 c0       	rjmp	.+134    	; 0x2448 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	98 2f       	mov	r25, r24
    23ce:	9c 5f       	subi	r25, 0xFC	; 252
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	69 2f       	mov	r22, r25
    23d4:	41 e0       	ldi	r20, 0x01	; 1
    23d6:	0e 94 f7 06 	call	0xdee	; 0xdee <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	88 2f       	mov	r24, r24
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9c 01       	movw	r18, r24
    23e2:	2c 5f       	subi	r18, 0xFC	; 252
    23e4:	3f 4f       	sbci	r19, 0xFF	; 255
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	02 c0       	rjmp	.+4      	; 0x23f0 <KEYPAD_getPressedKey+0x40>
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	2a 95       	dec	r18
    23f2:	e2 f7       	brpl	.-8      	; 0x23ec <KEYPAD_getPressedKey+0x3c>
    23f4:	80 95       	com	r24
    23f6:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	69 81       	ldd	r22, Y+1	; 0x01
    23fc:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2400:	1a 82       	std	Y+2, r1	; 0x02
    2402:	1c c0       	rjmp	.+56     	; 0x243c <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	6a 81       	ldd	r22, Y+2	; 0x02
    2408:	0e 94 cd 08 	call	0x119a	; 0x119a <GPIO_readPin>
    240c:	88 23       	and	r24, r24
    240e:	99 f4       	brne	.+38     	; 0x2436 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	88 2f       	mov	r24, r24
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	88 0f       	add	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	98 2f       	mov	r25, r24
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	89 0f       	add	r24, r25
    2424:	8f 5f       	subi	r24, 0xFF	; 255
    2426:	0e 94 29 12 	call	0x2452	; 0x2452 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	8f 5f       	subi	r24, 0xFF	; 255
    243a:	8a 83       	std	Y+2, r24	; 0x02
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	84 30       	cpi	r24, 0x04	; 4
    2440:	08 f3       	brcs	.-62     	; 0x2404 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	8f 5f       	subi	r24, 0xFF	; 255
    2446:	8b 83       	std	Y+3, r24	; 0x03
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	84 30       	cpi	r24, 0x04	; 4
    244c:	08 f4       	brcc	.+2      	; 0x2450 <KEYPAD_getPressedKey+0xa0>
    244e:	b9 cf       	rjmp	.-142    	; 0x23c2 <KEYPAD_getPressedKey+0x12>
    2450:	b6 cf       	rjmp	.-148    	; 0x23be <KEYPAD_getPressedKey+0xe>

00002452 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	00 d0       	rcall	.+0      	; 0x2458 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2458:	00 d0       	rcall	.+0      	; 0x245a <KEYPAD_4x4_adjustKeyNumber+0x8>
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2460:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	28 2f       	mov	r18, r24
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	3c 83       	std	Y+4, r19	; 0x04
    246a:	2b 83       	std	Y+3, r18	; 0x03
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	9c 81       	ldd	r25, Y+4	; 0x04
    2470:	88 30       	cpi	r24, 0x08	; 8
    2472:	91 05       	cpc	r25, r1
    2474:	09 f4       	brne	.+2      	; 0x2478 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2476:	70 c0       	rjmp	.+224    	; 0x2558 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2478:	2b 81       	ldd	r18, Y+3	; 0x03
    247a:	3c 81       	ldd	r19, Y+4	; 0x04
    247c:	29 30       	cpi	r18, 0x09	; 9
    247e:	31 05       	cpc	r19, r1
    2480:	5c f5       	brge	.+86     	; 0x24d8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	9c 81       	ldd	r25, Y+4	; 0x04
    2486:	84 30       	cpi	r24, 0x04	; 4
    2488:	91 05       	cpc	r25, r1
    248a:	09 f4       	brne	.+2      	; 0x248e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    248c:	59 c0       	rjmp	.+178    	; 0x2540 <KEYPAD_4x4_adjustKeyNumber+0xee>
    248e:	2b 81       	ldd	r18, Y+3	; 0x03
    2490:	3c 81       	ldd	r19, Y+4	; 0x04
    2492:	25 30       	cpi	r18, 0x05	; 5
    2494:	31 05       	cpc	r19, r1
    2496:	9c f4       	brge	.+38     	; 0x24be <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	9c 81       	ldd	r25, Y+4	; 0x04
    249c:	82 30       	cpi	r24, 0x02	; 2
    249e:	91 05       	cpc	r25, r1
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <KEYPAD_4x4_adjustKeyNumber+0x52>
    24a2:	48 c0       	rjmp	.+144    	; 0x2534 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    24a4:	2b 81       	ldd	r18, Y+3	; 0x03
    24a6:	3c 81       	ldd	r19, Y+4	; 0x04
    24a8:	23 30       	cpi	r18, 0x03	; 3
    24aa:	31 05       	cpc	r19, r1
    24ac:	0c f0       	brlt	.+2      	; 0x24b0 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    24ae:	45 c0       	rjmp	.+138    	; 0x253a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	9c 81       	ldd	r25, Y+4	; 0x04
    24b4:	81 30       	cpi	r24, 0x01	; 1
    24b6:	91 05       	cpc	r25, r1
    24b8:	09 f4       	brne	.+2      	; 0x24bc <KEYPAD_4x4_adjustKeyNumber+0x6a>
    24ba:	39 c0       	rjmp	.+114    	; 0x252e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    24bc:	67 c0       	rjmp	.+206    	; 0x258c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    24be:	2b 81       	ldd	r18, Y+3	; 0x03
    24c0:	3c 81       	ldd	r19, Y+4	; 0x04
    24c2:	26 30       	cpi	r18, 0x06	; 6
    24c4:	31 05       	cpc	r19, r1
    24c6:	09 f4       	brne	.+2      	; 0x24ca <KEYPAD_4x4_adjustKeyNumber+0x78>
    24c8:	41 c0       	rjmp	.+130    	; 0x254c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	9c 81       	ldd	r25, Y+4	; 0x04
    24ce:	87 30       	cpi	r24, 0x07	; 7
    24d0:	91 05       	cpc	r25, r1
    24d2:	0c f0       	brlt	.+2      	; 0x24d6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    24d4:	3e c0       	rjmp	.+124    	; 0x2552 <KEYPAD_4x4_adjustKeyNumber+0x100>
    24d6:	37 c0       	rjmp	.+110    	; 0x2546 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    24d8:	2b 81       	ldd	r18, Y+3	; 0x03
    24da:	3c 81       	ldd	r19, Y+4	; 0x04
    24dc:	2c 30       	cpi	r18, 0x0C	; 12
    24de:	31 05       	cpc	r19, r1
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <KEYPAD_4x4_adjustKeyNumber+0x92>
    24e2:	46 c0       	rjmp	.+140    	; 0x2570 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	9c 81       	ldd	r25, Y+4	; 0x04
    24e8:	8d 30       	cpi	r24, 0x0D	; 13
    24ea:	91 05       	cpc	r25, r1
    24ec:	5c f4       	brge	.+22     	; 0x2504 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    24ee:	2b 81       	ldd	r18, Y+3	; 0x03
    24f0:	3c 81       	ldd	r19, Y+4	; 0x04
    24f2:	2a 30       	cpi	r18, 0x0A	; 10
    24f4:	31 05       	cpc	r19, r1
    24f6:	b1 f1       	breq	.+108    	; 0x2564 <KEYPAD_4x4_adjustKeyNumber+0x112>
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	9c 81       	ldd	r25, Y+4	; 0x04
    24fc:	8b 30       	cpi	r24, 0x0B	; 11
    24fe:	91 05       	cpc	r25, r1
    2500:	a4 f5       	brge	.+104    	; 0x256a <KEYPAD_4x4_adjustKeyNumber+0x118>
    2502:	2d c0       	rjmp	.+90     	; 0x255e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2504:	2b 81       	ldd	r18, Y+3	; 0x03
    2506:	3c 81       	ldd	r19, Y+4	; 0x04
    2508:	2e 30       	cpi	r18, 0x0E	; 14
    250a:	31 05       	cpc	r19, r1
    250c:	b9 f1       	breq	.+110    	; 0x257c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	9c 81       	ldd	r25, Y+4	; 0x04
    2512:	8e 30       	cpi	r24, 0x0E	; 14
    2514:	91 05       	cpc	r25, r1
    2516:	7c f1       	brlt	.+94     	; 0x2576 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2518:	2b 81       	ldd	r18, Y+3	; 0x03
    251a:	3c 81       	ldd	r19, Y+4	; 0x04
    251c:	2f 30       	cpi	r18, 0x0F	; 15
    251e:	31 05       	cpc	r19, r1
    2520:	79 f1       	breq	.+94     	; 0x2580 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	9c 81       	ldd	r25, Y+4	; 0x04
    2526:	80 31       	cpi	r24, 0x10	; 16
    2528:	91 05       	cpc	r25, r1
    252a:	69 f1       	breq	.+90     	; 0x2586 <KEYPAD_4x4_adjustKeyNumber+0x134>
    252c:	2f c0       	rjmp	.+94     	; 0x258c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    252e:	87 e0       	ldi	r24, 0x07	; 7
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	2e c0       	rjmp	.+92     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2534:	88 e0       	ldi	r24, 0x08	; 8
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	2b c0       	rjmp	.+86     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    253a:	89 e0       	ldi	r24, 0x09	; 9
    253c:	89 83       	std	Y+1, r24	; 0x01
    253e:	28 c0       	rjmp	.+80     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2540:	85 e2       	ldi	r24, 0x25	; 37
    2542:	89 83       	std	Y+1, r24	; 0x01
    2544:	25 c0       	rjmp	.+74     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2546:	84 e0       	ldi	r24, 0x04	; 4
    2548:	89 83       	std	Y+1, r24	; 0x01
    254a:	22 c0       	rjmp	.+68     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    254c:	85 e0       	ldi	r24, 0x05	; 5
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	1f c0       	rjmp	.+62     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2552:	86 e0       	ldi	r24, 0x06	; 6
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	1c c0       	rjmp	.+56     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2558:	8a e2       	ldi	r24, 0x2A	; 42
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	19 c0       	rjmp	.+50     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	89 83       	std	Y+1, r24	; 0x01
    2562:	16 c0       	rjmp	.+44     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2564:	82 e0       	ldi	r24, 0x02	; 2
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	13 c0       	rjmp	.+38     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    256a:	83 e0       	ldi	r24, 0x03	; 3
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	10 c0       	rjmp	.+32     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2570:	8d e2       	ldi	r24, 0x2D	; 45
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	0d c0       	rjmp	.+26     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2576:	8d e0       	ldi	r24, 0x0D	; 13
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	0a c0       	rjmp	.+20     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    257c:	19 82       	std	Y+1, r1	; 0x01
    257e:	08 c0       	rjmp	.+16     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2580:	8d e3       	ldi	r24, 0x3D	; 61
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	05 c0       	rjmp	.+10     	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2586:	8b e2       	ldi	r24, 0x2B	; 43
    2588:	89 83       	std	Y+1, r24	; 0x01
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2590:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	41 e0       	ldi	r20, 0x01	; 1
    25ae:	0e 94 f7 06 	call	0xdee	; 0xdee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	61 e0       	ldi	r22, 0x01	; 1
    25b6:	41 e0       	ldi	r20, 0x01	; 1
    25b8:	0e 94 f7 06 	call	0xdee	; 0xdee <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	62 e0       	ldi	r22, 0x02	; 2
    25c0:	41 e0       	ldi	r20, 0x01	; 1
    25c2:	0e 94 f7 06 	call	0xdee	; 0xdee <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    25c6:	82 e0       	ldi	r24, 0x02	; 2
    25c8:	6f ef       	ldi	r22, 0xFF	; 255
    25ca:	0e 94 68 09 	call	0x12d0	; 0x12d0 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    25ce:	88 e3       	ldi	r24, 0x38	; 56
    25d0:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    25d4:	8c e0       	ldi	r24, 0x0C	; 12
    25d6:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_sendCommand>
}
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	e9 97       	sbiw	r28, 0x39	; 57
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	60 e0       	ldi	r22, 0x00	; 0
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	61 e0       	ldi	r22, 0x01	; 1
    260a:	40 e0       	ldi	r20, 0x00	; 0
    260c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <GPIO_writePin>
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	a0 e8       	ldi	r26, 0x80	; 128
    2616:	bf e3       	ldi	r27, 0x3F	; 63
    2618:	8d ab       	std	Y+53, r24	; 0x35
    261a:	9e ab       	std	Y+54, r25	; 0x36
    261c:	af ab       	std	Y+55, r26	; 0x37
    261e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2620:	6d a9       	ldd	r22, Y+53	; 0x35
    2622:	7e a9       	ldd	r23, Y+54	; 0x36
    2624:	8f a9       	ldd	r24, Y+55	; 0x37
    2626:	98 ad       	ldd	r25, Y+56	; 0x38
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	4a e7       	ldi	r20, 0x7A	; 122
    262e:	53 e4       	ldi	r21, 0x43	; 67
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	89 ab       	std	Y+49, r24	; 0x31
    263a:	9a ab       	std	Y+50, r25	; 0x32
    263c:	ab ab       	std	Y+51, r26	; 0x33
    263e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2640:	69 a9       	ldd	r22, Y+49	; 0x31
    2642:	7a a9       	ldd	r23, Y+50	; 0x32
    2644:	8b a9       	ldd	r24, Y+51	; 0x33
    2646:	9c a9       	ldd	r25, Y+52	; 0x34
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e8       	ldi	r20, 0x80	; 128
    264e:	5f e3       	ldi	r21, 0x3F	; 63
    2650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2654:	88 23       	and	r24, r24
    2656:	2c f4       	brge	.+10     	; 0x2662 <LCD_sendCommand+0x7c>
		__ticks = 1;
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	98 ab       	std	Y+48, r25	; 0x30
    265e:	8f a7       	std	Y+47, r24	; 0x2f
    2660:	3f c0       	rjmp	.+126    	; 0x26e0 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    2662:	69 a9       	ldd	r22, Y+49	; 0x31
    2664:	7a a9       	ldd	r23, Y+50	; 0x32
    2666:	8b a9       	ldd	r24, Y+51	; 0x33
    2668:	9c a9       	ldd	r25, Y+52	; 0x34
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	3f ef       	ldi	r19, 0xFF	; 255
    266e:	4f e7       	ldi	r20, 0x7F	; 127
    2670:	57 e4       	ldi	r21, 0x47	; 71
    2672:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2676:	18 16       	cp	r1, r24
    2678:	4c f5       	brge	.+82     	; 0x26cc <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267a:	6d a9       	ldd	r22, Y+53	; 0x35
    267c:	7e a9       	ldd	r23, Y+54	; 0x36
    267e:	8f a9       	ldd	r24, Y+55	; 0x37
    2680:	98 ad       	ldd	r25, Y+56	; 0x38
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e2       	ldi	r20, 0x20	; 32
    2688:	51 e4       	ldi	r21, 0x41	; 65
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	98 ab       	std	Y+48, r25	; 0x30
    26a0:	8f a7       	std	Y+47, r24	; 0x2f
    26a2:	0f c0       	rjmp	.+30     	; 0x26c2 <LCD_sendCommand+0xdc>
    26a4:	89 e1       	ldi	r24, 0x19	; 25
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	9e a7       	std	Y+46, r25	; 0x2e
    26aa:	8d a7       	std	Y+45, r24	; 0x2d
    26ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    26ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <LCD_sendCommand+0xca>
    26b4:	9e a7       	std	Y+46, r25	; 0x2e
    26b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ba:	98 a9       	ldd	r25, Y+48	; 0x30
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	98 ab       	std	Y+48, r25	; 0x30
    26c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26c4:	98 a9       	ldd	r25, Y+48	; 0x30
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	69 f7       	brne	.-38     	; 0x26a4 <LCD_sendCommand+0xbe>
    26ca:	14 c0       	rjmp	.+40     	; 0x26f4 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26cc:	69 a9       	ldd	r22, Y+49	; 0x31
    26ce:	7a a9       	ldd	r23, Y+50	; 0x32
    26d0:	8b a9       	ldd	r24, Y+51	; 0x33
    26d2:	9c a9       	ldd	r25, Y+52	; 0x34
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	98 ab       	std	Y+48, r25	; 0x30
    26de:	8f a7       	std	Y+47, r24	; 0x2f
    26e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    26e2:	98 a9       	ldd	r25, Y+48	; 0x30
    26e4:	9c a7       	std	Y+44, r25	; 0x2c
    26e6:	8b a7       	std	Y+43, r24	; 0x2b
    26e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <LCD_sendCommand+0x106>
    26f0:	9c a7       	std	Y+44, r25	; 0x2c
    26f2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	62 e0       	ldi	r22, 0x02	; 2
    26f8:	41 e0       	ldi	r20, 0x01	; 1
    26fa:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <GPIO_writePin>
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	a0 e8       	ldi	r26, 0x80	; 128
    2704:	bf e3       	ldi	r27, 0x3F	; 63
    2706:	8f a3       	std	Y+39, r24	; 0x27
    2708:	98 a7       	std	Y+40, r25	; 0x28
    270a:	a9 a7       	std	Y+41, r26	; 0x29
    270c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    270e:	6f a1       	ldd	r22, Y+39	; 0x27
    2710:	78 a5       	ldd	r23, Y+40	; 0x28
    2712:	89 a5       	ldd	r24, Y+41	; 0x29
    2714:	9a a5       	ldd	r25, Y+42	; 0x2a
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	4a e7       	ldi	r20, 0x7A	; 122
    271c:	53 e4       	ldi	r21, 0x43	; 67
    271e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	8b a3       	std	Y+35, r24	; 0x23
    2728:	9c a3       	std	Y+36, r25	; 0x24
    272a:	ad a3       	std	Y+37, r26	; 0x25
    272c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    272e:	6b a1       	ldd	r22, Y+35	; 0x23
    2730:	7c a1       	ldd	r23, Y+36	; 0x24
    2732:	8d a1       	ldd	r24, Y+37	; 0x25
    2734:	9e a1       	ldd	r25, Y+38	; 0x26
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e8       	ldi	r20, 0x80	; 128
    273c:	5f e3       	ldi	r21, 0x3F	; 63
    273e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2742:	88 23       	and	r24, r24
    2744:	2c f4       	brge	.+10     	; 0x2750 <LCD_sendCommand+0x16a>
		__ticks = 1;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9a a3       	std	Y+34, r25	; 0x22
    274c:	89 a3       	std	Y+33, r24	; 0x21
    274e:	3f c0       	rjmp	.+126    	; 0x27ce <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2750:	6b a1       	ldd	r22, Y+35	; 0x23
    2752:	7c a1       	ldd	r23, Y+36	; 0x24
    2754:	8d a1       	ldd	r24, Y+37	; 0x25
    2756:	9e a1       	ldd	r25, Y+38	; 0x26
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	3f ef       	ldi	r19, 0xFF	; 255
    275c:	4f e7       	ldi	r20, 0x7F	; 127
    275e:	57 e4       	ldi	r21, 0x47	; 71
    2760:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2764:	18 16       	cp	r1, r24
    2766:	4c f5       	brge	.+82     	; 0x27ba <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2768:	6f a1       	ldd	r22, Y+39	; 0x27
    276a:	78 a5       	ldd	r23, Y+40	; 0x28
    276c:	89 a5       	ldd	r24, Y+41	; 0x29
    276e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e2       	ldi	r20, 0x20	; 32
    2776:	51 e4       	ldi	r21, 0x41	; 65
    2778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	bc 01       	movw	r22, r24
    2782:	cd 01       	movw	r24, r26
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	9a a3       	std	Y+34, r25	; 0x22
    278e:	89 a3       	std	Y+33, r24	; 0x21
    2790:	0f c0       	rjmp	.+30     	; 0x27b0 <LCD_sendCommand+0x1ca>
    2792:	89 e1       	ldi	r24, 0x19	; 25
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	98 a3       	std	Y+32, r25	; 0x20
    2798:	8f 8f       	std	Y+31, r24	; 0x1f
    279a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    279c:	98 a1       	ldd	r25, Y+32	; 0x20
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	f1 f7       	brne	.-4      	; 0x279e <LCD_sendCommand+0x1b8>
    27a2:	98 a3       	std	Y+32, r25	; 0x20
    27a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a6:	89 a1       	ldd	r24, Y+33	; 0x21
    27a8:	9a a1       	ldd	r25, Y+34	; 0x22
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	9a a3       	std	Y+34, r25	; 0x22
    27ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b0:	89 a1       	ldd	r24, Y+33	; 0x21
    27b2:	9a a1       	ldd	r25, Y+34	; 0x22
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	69 f7       	brne	.-38     	; 0x2792 <LCD_sendCommand+0x1ac>
    27b8:	14 c0       	rjmp	.+40     	; 0x27e2 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ba:	6b a1       	ldd	r22, Y+35	; 0x23
    27bc:	7c a1       	ldd	r23, Y+36	; 0x24
    27be:	8d a1       	ldd	r24, Y+37	; 0x25
    27c0:	9e a1       	ldd	r25, Y+38	; 0x26
    27c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	9a a3       	std	Y+34, r25	; 0x22
    27cc:	89 a3       	std	Y+33, r24	; 0x21
    27ce:	89 a1       	ldd	r24, Y+33	; 0x21
    27d0:	9a a1       	ldd	r25, Y+34	; 0x22
    27d2:	9e 8f       	std	Y+30, r25	; 0x1e
    27d4:	8d 8f       	std	Y+29, r24	; 0x1d
    27d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <LCD_sendCommand+0x1f4>
    27de:	9e 8f       	std	Y+30, r25	; 0x1e
    27e0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    27e2:	82 e0       	ldi	r24, 0x02	; 2
    27e4:	69 ad       	ldd	r22, Y+57	; 0x39
    27e6:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_writePort>
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	a0 e8       	ldi	r26, 0x80	; 128
    27f0:	bf e3       	ldi	r27, 0x3F	; 63
    27f2:	89 8f       	std	Y+25, r24	; 0x19
    27f4:	9a 8f       	std	Y+26, r25	; 0x1a
    27f6:	ab 8f       	std	Y+27, r26	; 0x1b
    27f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fa:	69 8d       	ldd	r22, Y+25	; 0x19
    27fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2800:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	4a e7       	ldi	r20, 0x7A	; 122
    2808:	53 e4       	ldi	r21, 0x43	; 67
    280a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	8d 8b       	std	Y+21, r24	; 0x15
    2814:	9e 8b       	std	Y+22, r25	; 0x16
    2816:	af 8b       	std	Y+23, r26	; 0x17
    2818:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    281a:	6d 89       	ldd	r22, Y+21	; 0x15
    281c:	7e 89       	ldd	r23, Y+22	; 0x16
    281e:	8f 89       	ldd	r24, Y+23	; 0x17
    2820:	98 8d       	ldd	r25, Y+24	; 0x18
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e8       	ldi	r20, 0x80	; 128
    2828:	5f e3       	ldi	r21, 0x3F	; 63
    282a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    282e:	88 23       	and	r24, r24
    2830:	2c f4       	brge	.+10     	; 0x283c <LCD_sendCommand+0x256>
		__ticks = 1;
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
    283a:	3f c0       	rjmp	.+126    	; 0x28ba <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    283c:	6d 89       	ldd	r22, Y+21	; 0x15
    283e:	7e 89       	ldd	r23, Y+22	; 0x16
    2840:	8f 89       	ldd	r24, Y+23	; 0x17
    2842:	98 8d       	ldd	r25, Y+24	; 0x18
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	3f ef       	ldi	r19, 0xFF	; 255
    2848:	4f e7       	ldi	r20, 0x7F	; 127
    284a:	57 e4       	ldi	r21, 0x47	; 71
    284c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2850:	18 16       	cp	r1, r24
    2852:	4c f5       	brge	.+82     	; 0x28a6 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2854:	69 8d       	ldd	r22, Y+25	; 0x19
    2856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e2       	ldi	r20, 0x20	; 32
    2862:	51 e4       	ldi	r21, 0x41	; 65
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	bc 01       	movw	r22, r24
    286e:	cd 01       	movw	r24, r26
    2870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	9c 8b       	std	Y+20, r25	; 0x14
    287a:	8b 8b       	std	Y+19, r24	; 0x13
    287c:	0f c0       	rjmp	.+30     	; 0x289c <LCD_sendCommand+0x2b6>
    287e:	89 e1       	ldi	r24, 0x19	; 25
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9a 8b       	std	Y+18, r25	; 0x12
    2884:	89 8b       	std	Y+17, r24	; 0x11
    2886:	89 89       	ldd	r24, Y+17	; 0x11
    2888:	9a 89       	ldd	r25, Y+18	; 0x12
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	f1 f7       	brne	.-4      	; 0x288a <LCD_sendCommand+0x2a4>
    288e:	9a 8b       	std	Y+18, r25	; 0x12
    2890:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2892:	8b 89       	ldd	r24, Y+19	; 0x13
    2894:	9c 89       	ldd	r25, Y+20	; 0x14
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	9c 8b       	std	Y+20, r25	; 0x14
    289a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289c:	8b 89       	ldd	r24, Y+19	; 0x13
    289e:	9c 89       	ldd	r25, Y+20	; 0x14
    28a0:	00 97       	sbiw	r24, 0x00	; 0
    28a2:	69 f7       	brne	.-38     	; 0x287e <LCD_sendCommand+0x298>
    28a4:	14 c0       	rjmp	.+40     	; 0x28ce <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a6:	6d 89       	ldd	r22, Y+21	; 0x15
    28a8:	7e 89       	ldd	r23, Y+22	; 0x16
    28aa:	8f 89       	ldd	r24, Y+23	; 0x17
    28ac:	98 8d       	ldd	r25, Y+24	; 0x18
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9c 8b       	std	Y+20, r25	; 0x14
    28b8:	8b 8b       	std	Y+19, r24	; 0x13
    28ba:	8b 89       	ldd	r24, Y+19	; 0x13
    28bc:	9c 89       	ldd	r25, Y+20	; 0x14
    28be:	98 8b       	std	Y+16, r25	; 0x10
    28c0:	8f 87       	std	Y+15, r24	; 0x0f
    28c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c4:	98 89       	ldd	r25, Y+16	; 0x10
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <LCD_sendCommand+0x2e0>
    28ca:	98 8b       	std	Y+16, r25	; 0x10
    28cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	62 e0       	ldi	r22, 0x02	; 2
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <GPIO_writePin>
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a0 e8       	ldi	r26, 0x80	; 128
    28de:	bf e3       	ldi	r27, 0x3F	; 63
    28e0:	8b 87       	std	Y+11, r24	; 0x0b
    28e2:	9c 87       	std	Y+12, r25	; 0x0c
    28e4:	ad 87       	std	Y+13, r26	; 0x0d
    28e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4a e7       	ldi	r20, 0x7A	; 122
    28f6:	53 e4       	ldi	r21, 0x43	; 67
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	8f 83       	std	Y+7, r24	; 0x07
    2902:	98 87       	std	Y+8, r25	; 0x08
    2904:	a9 87       	std	Y+9, r26	; 0x09
    2906:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2908:	6f 81       	ldd	r22, Y+7	; 0x07
    290a:	78 85       	ldd	r23, Y+8	; 0x08
    290c:	89 85       	ldd	r24, Y+9	; 0x09
    290e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	5f e3       	ldi	r21, 0x3F	; 63
    2918:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    291c:	88 23       	and	r24, r24
    291e:	2c f4       	brge	.+10     	; 0x292a <LCD_sendCommand+0x344>
		__ticks = 1;
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	3f c0       	rjmp	.+126    	; 0x29a8 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    292a:	6f 81       	ldd	r22, Y+7	; 0x07
    292c:	78 85       	ldd	r23, Y+8	; 0x08
    292e:	89 85       	ldd	r24, Y+9	; 0x09
    2930:	9a 85       	ldd	r25, Y+10	; 0x0a
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	3f ef       	ldi	r19, 0xFF	; 255
    2936:	4f e7       	ldi	r20, 0x7F	; 127
    2938:	57 e4       	ldi	r21, 0x47	; 71
    293a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    293e:	18 16       	cp	r1, r24
    2940:	4c f5       	brge	.+82     	; 0x2994 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2942:	6b 85       	ldd	r22, Y+11	; 0x0b
    2944:	7c 85       	ldd	r23, Y+12	; 0x0c
    2946:	8d 85       	ldd	r24, Y+13	; 0x0d
    2948:	9e 85       	ldd	r25, Y+14	; 0x0e
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e2       	ldi	r20, 0x20	; 32
    2950:	51 e4       	ldi	r21, 0x41	; 65
    2952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	bc 01       	movw	r22, r24
    295c:	cd 01       	movw	r24, r26
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	0f c0       	rjmp	.+30     	; 0x298a <LCD_sendCommand+0x3a4>
    296c:	89 e1       	ldi	r24, 0x19	; 25
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9c 83       	std	Y+4, r25	; 0x04
    2972:	8b 83       	std	Y+3, r24	; 0x03
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	9c 81       	ldd	r25, Y+4	; 0x04
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <LCD_sendCommand+0x392>
    297c:	9c 83       	std	Y+4, r25	; 0x04
    297e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	9e 83       	std	Y+6, r25	; 0x06
    2988:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298a:	8d 81       	ldd	r24, Y+5	; 0x05
    298c:	9e 81       	ldd	r25, Y+6	; 0x06
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	69 f7       	brne	.-38     	; 0x296c <LCD_sendCommand+0x386>
    2992:	14 c0       	rjmp	.+40     	; 0x29bc <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	9e 83       	std	Y+6, r25	; 0x06
    29a6:	8d 83       	std	Y+5, r24	; 0x05
    29a8:	8d 81       	ldd	r24, Y+5	; 0x05
    29aa:	9e 81       	ldd	r25, Y+6	; 0x06
    29ac:	9a 83       	std	Y+2, r25	; 0x02
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_sendCommand+0x3ce>
    29b8:	9a 83       	std	Y+2, r25	; 0x02
    29ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    29bc:	e9 96       	adiw	r28, 0x39	; 57
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	e9 97       	sbiw	r28, 0x39	; 57
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	41 e0       	ldi	r20, 0x01	; 1
    29ea:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	61 e0       	ldi	r22, 0x01	; 1
    29f2:	40 e0       	ldi	r20, 0x00	; 0
    29f4:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <GPIO_writePin>
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	a0 e8       	ldi	r26, 0x80	; 128
    29fe:	bf e3       	ldi	r27, 0x3F	; 63
    2a00:	8d ab       	std	Y+53, r24	; 0x35
    2a02:	9e ab       	std	Y+54, r25	; 0x36
    2a04:	af ab       	std	Y+55, r26	; 0x37
    2a06:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a08:	6d a9       	ldd	r22, Y+53	; 0x35
    2a0a:	7e a9       	ldd	r23, Y+54	; 0x36
    2a0c:	8f a9       	ldd	r24, Y+55	; 0x37
    2a0e:	98 ad       	ldd	r25, Y+56	; 0x38
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	4a e7       	ldi	r20, 0x7A	; 122
    2a16:	53 e4       	ldi	r21, 0x43	; 67
    2a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	89 ab       	std	Y+49, r24	; 0x31
    2a22:	9a ab       	std	Y+50, r25	; 0x32
    2a24:	ab ab       	std	Y+51, r26	; 0x33
    2a26:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a28:	69 a9       	ldd	r22, Y+49	; 0x31
    2a2a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a2c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a2e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	40 e8       	ldi	r20, 0x80	; 128
    2a36:	5f e3       	ldi	r21, 0x3F	; 63
    2a38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a3c:	88 23       	and	r24, r24
    2a3e:	2c f4       	brge	.+10     	; 0x2a4a <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	98 ab       	std	Y+48, r25	; 0x30
    2a46:	8f a7       	std	Y+47, r24	; 0x2f
    2a48:	3f c0       	rjmp	.+126    	; 0x2ac8 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2a4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a50:	9c a9       	ldd	r25, Y+52	; 0x34
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	3f ef       	ldi	r19, 0xFF	; 255
    2a56:	4f e7       	ldi	r20, 0x7F	; 127
    2a58:	57 e4       	ldi	r21, 0x47	; 71
    2a5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a5e:	18 16       	cp	r1, r24
    2a60:	4c f5       	brge	.+82     	; 0x2ab4 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a62:	6d a9       	ldd	r22, Y+53	; 0x35
    2a64:	7e a9       	ldd	r23, Y+54	; 0x36
    2a66:	8f a9       	ldd	r24, Y+55	; 0x37
    2a68:	98 ad       	ldd	r25, Y+56	; 0x38
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	40 e2       	ldi	r20, 0x20	; 32
    2a70:	51 e4       	ldi	r21, 0x41	; 65
    2a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	bc 01       	movw	r22, r24
    2a7c:	cd 01       	movw	r24, r26
    2a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	98 ab       	std	Y+48, r25	; 0x30
    2a88:	8f a7       	std	Y+47, r24	; 0x2f
    2a8a:	0f c0       	rjmp	.+30     	; 0x2aaa <LCD_displayCharacter+0xdc>
    2a8c:	89 e1       	ldi	r24, 0x19	; 25
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	9e a7       	std	Y+46, r25	; 0x2e
    2a92:	8d a7       	std	Y+45, r24	; 0x2d
    2a94:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a96:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <LCD_displayCharacter+0xca>
    2a9c:	9e a7       	std	Y+46, r25	; 0x2e
    2a9e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aa2:	98 a9       	ldd	r25, Y+48	; 0x30
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	98 ab       	std	Y+48, r25	; 0x30
    2aa8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aac:	98 a9       	ldd	r25, Y+48	; 0x30
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	69 f7       	brne	.-38     	; 0x2a8c <LCD_displayCharacter+0xbe>
    2ab2:	14 c0       	rjmp	.+40     	; 0x2adc <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ab6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ab8:	8b a9       	ldd	r24, Y+51	; 0x33
    2aba:	9c a9       	ldd	r25, Y+52	; 0x34
    2abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	98 ab       	std	Y+48, r25	; 0x30
    2ac6:	8f a7       	std	Y+47, r24	; 0x2f
    2ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aca:	98 a9       	ldd	r25, Y+48	; 0x30
    2acc:	9c a7       	std	Y+44, r25	; 0x2c
    2ace:	8b a7       	std	Y+43, r24	; 0x2b
    2ad0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ad2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <LCD_displayCharacter+0x106>
    2ad8:	9c a7       	std	Y+44, r25	; 0x2c
    2ada:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	62 e0       	ldi	r22, 0x02	; 2
    2ae0:	41 e0       	ldi	r20, 0x01	; 1
    2ae2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <GPIO_writePin>
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	a0 e8       	ldi	r26, 0x80	; 128
    2aec:	bf e3       	ldi	r27, 0x3F	; 63
    2aee:	8f a3       	std	Y+39, r24	; 0x27
    2af0:	98 a7       	std	Y+40, r25	; 0x28
    2af2:	a9 a7       	std	Y+41, r26	; 0x29
    2af4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af6:	6f a1       	ldd	r22, Y+39	; 0x27
    2af8:	78 a5       	ldd	r23, Y+40	; 0x28
    2afa:	89 a5       	ldd	r24, Y+41	; 0x29
    2afc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	4a e7       	ldi	r20, 0x7A	; 122
    2b04:	53 e4       	ldi	r21, 0x43	; 67
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	8b a3       	std	Y+35, r24	; 0x23
    2b10:	9c a3       	std	Y+36, r25	; 0x24
    2b12:	ad a3       	std	Y+37, r26	; 0x25
    2b14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b16:	6b a1       	ldd	r22, Y+35	; 0x23
    2b18:	7c a1       	ldd	r23, Y+36	; 0x24
    2b1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e8       	ldi	r20, 0x80	; 128
    2b24:	5f e3       	ldi	r21, 0x3F	; 63
    2b26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b2a:	88 23       	and	r24, r24
    2b2c:	2c f4       	brge	.+10     	; 0x2b38 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	9a a3       	std	Y+34, r25	; 0x22
    2b34:	89 a3       	std	Y+33, r24	; 0x21
    2b36:	3f c0       	rjmp	.+126    	; 0x2bb6 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2b38:	6b a1       	ldd	r22, Y+35	; 0x23
    2b3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	3f ef       	ldi	r19, 0xFF	; 255
    2b44:	4f e7       	ldi	r20, 0x7F	; 127
    2b46:	57 e4       	ldi	r21, 0x47	; 71
    2b48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b4c:	18 16       	cp	r1, r24
    2b4e:	4c f5       	brge	.+82     	; 0x2ba2 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b50:	6f a1       	ldd	r22, Y+39	; 0x27
    2b52:	78 a5       	ldd	r23, Y+40	; 0x28
    2b54:	89 a5       	ldd	r24, Y+41	; 0x29
    2b56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e2       	ldi	r20, 0x20	; 32
    2b5e:	51 e4       	ldi	r21, 0x41	; 65
    2b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	bc 01       	movw	r22, r24
    2b6a:	cd 01       	movw	r24, r26
    2b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	9a a3       	std	Y+34, r25	; 0x22
    2b76:	89 a3       	std	Y+33, r24	; 0x21
    2b78:	0f c0       	rjmp	.+30     	; 0x2b98 <LCD_displayCharacter+0x1ca>
    2b7a:	89 e1       	ldi	r24, 0x19	; 25
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	98 a3       	std	Y+32, r25	; 0x20
    2b80:	8f 8f       	std	Y+31, r24	; 0x1f
    2b82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b84:	98 a1       	ldd	r25, Y+32	; 0x20
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <LCD_displayCharacter+0x1b8>
    2b8a:	98 a3       	std	Y+32, r25	; 0x20
    2b8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b90:	9a a1       	ldd	r25, Y+34	; 0x22
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	9a a3       	std	Y+34, r25	; 0x22
    2b96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b98:	89 a1       	ldd	r24, Y+33	; 0x21
    2b9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b9c:	00 97       	sbiw	r24, 0x00	; 0
    2b9e:	69 f7       	brne	.-38     	; 0x2b7a <LCD_displayCharacter+0x1ac>
    2ba0:	14 c0       	rjmp	.+40     	; 0x2bca <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba8:	9e a1       	ldd	r25, Y+38	; 0x26
    2baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	9a a3       	std	Y+34, r25	; 0x22
    2bb4:	89 a3       	std	Y+33, r24	; 0x21
    2bb6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bba:	9e 8f       	std	Y+30, r25	; 0x1e
    2bbc:	8d 8f       	std	Y+29, r24	; 0x1d
    2bbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bc0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <LCD_displayCharacter+0x1f4>
    2bc6:	9e 8f       	std	Y+30, r25	; 0x1e
    2bc8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2bca:	82 e0       	ldi	r24, 0x02	; 2
    2bcc:	69 ad       	ldd	r22, Y+57	; 0x39
    2bce:	0e 94 ac 09 	call	0x1358	; 0x1358 <GPIO_writePort>
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	a0 e8       	ldi	r26, 0x80	; 128
    2bd8:	bf e3       	ldi	r27, 0x3F	; 63
    2bda:	89 8f       	std	Y+25, r24	; 0x19
    2bdc:	9a 8f       	std	Y+26, r25	; 0x1a
    2bde:	ab 8f       	std	Y+27, r26	; 0x1b
    2be0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be2:	69 8d       	ldd	r22, Y+25	; 0x19
    2be4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2be6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2be8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	4a e7       	ldi	r20, 0x7A	; 122
    2bf0:	53 e4       	ldi	r21, 0x43	; 67
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	8d 8b       	std	Y+21, r24	; 0x15
    2bfc:	9e 8b       	std	Y+22, r25	; 0x16
    2bfe:	af 8b       	std	Y+23, r26	; 0x17
    2c00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c02:	6d 89       	ldd	r22, Y+21	; 0x15
    2c04:	7e 89       	ldd	r23, Y+22	; 0x16
    2c06:	8f 89       	ldd	r24, Y+23	; 0x17
    2c08:	98 8d       	ldd	r25, Y+24	; 0x18
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	40 e8       	ldi	r20, 0x80	; 128
    2c10:	5f e3       	ldi	r21, 0x3F	; 63
    2c12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c16:	88 23       	and	r24, r24
    2c18:	2c f4       	brge	.+10     	; 0x2c24 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	9c 8b       	std	Y+20, r25	; 0x14
    2c20:	8b 8b       	std	Y+19, r24	; 0x13
    2c22:	3f c0       	rjmp	.+126    	; 0x2ca2 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2c24:	6d 89       	ldd	r22, Y+21	; 0x15
    2c26:	7e 89       	ldd	r23, Y+22	; 0x16
    2c28:	8f 89       	ldd	r24, Y+23	; 0x17
    2c2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	3f ef       	ldi	r19, 0xFF	; 255
    2c30:	4f e7       	ldi	r20, 0x7F	; 127
    2c32:	57 e4       	ldi	r21, 0x47	; 71
    2c34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c38:	18 16       	cp	r1, r24
    2c3a:	4c f5       	brge	.+82     	; 0x2c8e <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e2       	ldi	r20, 0x20	; 32
    2c4a:	51 e4       	ldi	r21, 0x41	; 65
    2c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	bc 01       	movw	r22, r24
    2c56:	cd 01       	movw	r24, r26
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	9c 8b       	std	Y+20, r25	; 0x14
    2c62:	8b 8b       	std	Y+19, r24	; 0x13
    2c64:	0f c0       	rjmp	.+30     	; 0x2c84 <LCD_displayCharacter+0x2b6>
    2c66:	89 e1       	ldi	r24, 0x19	; 25
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9a 8b       	std	Y+18, r25	; 0x12
    2c6c:	89 8b       	std	Y+17, r24	; 0x11
    2c6e:	89 89       	ldd	r24, Y+17	; 0x11
    2c70:	9a 89       	ldd	r25, Y+18	; 0x12
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	f1 f7       	brne	.-4      	; 0x2c72 <LCD_displayCharacter+0x2a4>
    2c76:	9a 8b       	std	Y+18, r25	; 0x12
    2c78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	9c 8b       	std	Y+20, r25	; 0x14
    2c82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c84:	8b 89       	ldd	r24, Y+19	; 0x13
    2c86:	9c 89       	ldd	r25, Y+20	; 0x14
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	69 f7       	brne	.-38     	; 0x2c66 <LCD_displayCharacter+0x298>
    2c8c:	14 c0       	rjmp	.+40     	; 0x2cb6 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c90:	7e 89       	ldd	r23, Y+22	; 0x16
    2c92:	8f 89       	ldd	r24, Y+23	; 0x17
    2c94:	98 8d       	ldd	r25, Y+24	; 0x18
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	9c 8b       	std	Y+20, r25	; 0x14
    2ca0:	8b 8b       	std	Y+19, r24	; 0x13
    2ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca6:	98 8b       	std	Y+16, r25	; 0x10
    2ca8:	8f 87       	std	Y+15, r24	; 0x0f
    2caa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cac:	98 89       	ldd	r25, Y+16	; 0x10
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <LCD_displayCharacter+0x2e0>
    2cb2:	98 8b       	std	Y+16, r25	; 0x10
    2cb4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	62 e0       	ldi	r22, 0x02	; 2
    2cba:	40 e0       	ldi	r20, 0x00	; 0
    2cbc:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <GPIO_writePin>
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	a0 e8       	ldi	r26, 0x80	; 128
    2cc6:	bf e3       	ldi	r27, 0x3F	; 63
    2cc8:	8b 87       	std	Y+11, r24	; 0x0b
    2cca:	9c 87       	std	Y+12, r25	; 0x0c
    2ccc:	ad 87       	std	Y+13, r26	; 0x0d
    2cce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	4a e7       	ldi	r20, 0x7A	; 122
    2cde:	53 e4       	ldi	r21, 0x43	; 67
    2ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	8f 83       	std	Y+7, r24	; 0x07
    2cea:	98 87       	std	Y+8, r25	; 0x08
    2cec:	a9 87       	std	Y+9, r26	; 0x09
    2cee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf2:	78 85       	ldd	r23, Y+8	; 0x08
    2cf4:	89 85       	ldd	r24, Y+9	; 0x09
    2cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e8       	ldi	r20, 0x80	; 128
    2cfe:	5f e3       	ldi	r21, 0x3F	; 63
    2d00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d04:	88 23       	and	r24, r24
    2d06:	2c f4       	brge	.+10     	; 0x2d12 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	9e 83       	std	Y+6, r25	; 0x06
    2d0e:	8d 83       	std	Y+5, r24	; 0x05
    2d10:	3f c0       	rjmp	.+126    	; 0x2d90 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2d12:	6f 81       	ldd	r22, Y+7	; 0x07
    2d14:	78 85       	ldd	r23, Y+8	; 0x08
    2d16:	89 85       	ldd	r24, Y+9	; 0x09
    2d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	3f ef       	ldi	r19, 0xFF	; 255
    2d1e:	4f e7       	ldi	r20, 0x7F	; 127
    2d20:	57 e4       	ldi	r21, 0x47	; 71
    2d22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d26:	18 16       	cp	r1, r24
    2d28:	4c f5       	brge	.+82     	; 0x2d7c <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e2       	ldi	r20, 0x20	; 32
    2d38:	51 e4       	ldi	r21, 0x41	; 65
    2d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	bc 01       	movw	r22, r24
    2d44:	cd 01       	movw	r24, r26
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	9e 83       	std	Y+6, r25	; 0x06
    2d50:	8d 83       	std	Y+5, r24	; 0x05
    2d52:	0f c0       	rjmp	.+30     	; 0x2d72 <LCD_displayCharacter+0x3a4>
    2d54:	89 e1       	ldi	r24, 0x19	; 25
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9c 83       	std	Y+4, r25	; 0x04
    2d5a:	8b 83       	std	Y+3, r24	; 0x03
    2d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <LCD_displayCharacter+0x392>
    2d64:	9c 83       	std	Y+4, r25	; 0x04
    2d66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d68:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	9e 83       	std	Y+6, r25	; 0x06
    2d70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d72:	8d 81       	ldd	r24, Y+5	; 0x05
    2d74:	9e 81       	ldd	r25, Y+6	; 0x06
    2d76:	00 97       	sbiw	r24, 0x00	; 0
    2d78:	69 f7       	brne	.-38     	; 0x2d54 <LCD_displayCharacter+0x386>
    2d7a:	14 c0       	rjmp	.+40     	; 0x2da4 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7e:	78 85       	ldd	r23, Y+8	; 0x08
    2d80:	89 85       	ldd	r24, Y+9	; 0x09
    2d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	9e 83       	std	Y+6, r25	; 0x06
    2d8e:	8d 83       	std	Y+5, r24	; 0x05
    2d90:	8d 81       	ldd	r24, Y+5	; 0x05
    2d92:	9e 81       	ldd	r25, Y+6	; 0x06
    2d94:	9a 83       	std	Y+2, r25	; 0x02
    2d96:	89 83       	std	Y+1, r24	; 0x01
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <LCD_displayCharacter+0x3ce>
    2da0:	9a 83       	std	Y+2, r25	; 0x02
    2da2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2da4:	e9 96       	adiw	r28, 0x39	; 57
    2da6:	0f b6       	in	r0, 0x3f	; 63
    2da8:	f8 94       	cli
    2daa:	de bf       	out	0x3e, r29	; 62
    2dac:	0f be       	out	0x3f, r0	; 63
    2dae:	cd bf       	out	0x3d, r28	; 61
    2db0:	cf 91       	pop	r28
    2db2:	df 91       	pop	r29
    2db4:	08 95       	ret

00002db6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2db6:	df 93       	push	r29
    2db8:	cf 93       	push	r28
    2dba:	00 d0       	rcall	.+0      	; 0x2dbc <LCD_displayString+0x6>
    2dbc:	0f 92       	push	r0
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	9b 83       	std	Y+3, r25	; 0x03
    2dc4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2dc6:	19 82       	std	Y+1, r1	; 0x01
    2dc8:	0e c0       	rjmp	.+28     	; 0x2de6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	28 2f       	mov	r18, r24
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	e2 0f       	add	r30, r18
    2dd8:	f3 1f       	adc	r31, r19
    2dda:	80 81       	ld	r24, Z
    2ddc:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_displayCharacter>
		i++;
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	8f 5f       	subi	r24, 0xFF	; 255
    2de4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2de6:	89 81       	ldd	r24, Y+1	; 0x01
    2de8:	28 2f       	mov	r18, r24
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	8a 81       	ldd	r24, Y+2	; 0x02
    2dee:	9b 81       	ldd	r25, Y+3	; 0x03
    2df0:	fc 01       	movw	r30, r24
    2df2:	e2 0f       	add	r30, r18
    2df4:	f3 1f       	adc	r31, r19
    2df6:	80 81       	ld	r24, Z
    2df8:	88 23       	and	r24, r24
    2dfa:	39 f7       	brne	.-50     	; 0x2dca <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <LCD_moveCursor+0x6>
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <LCD_moveCursor+0x8>
    2e10:	0f 92       	push	r0
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
    2e16:	8a 83       	std	Y+2, r24	; 0x02
    2e18:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	3d 83       	std	Y+5, r19	; 0x05
    2e22:	2c 83       	std	Y+4, r18	; 0x04
    2e24:	8c 81       	ldd	r24, Y+4	; 0x04
    2e26:	9d 81       	ldd	r25, Y+5	; 0x05
    2e28:	81 30       	cpi	r24, 0x01	; 1
    2e2a:	91 05       	cpc	r25, r1
    2e2c:	c1 f0       	breq	.+48     	; 0x2e5e <LCD_moveCursor+0x56>
    2e2e:	2c 81       	ldd	r18, Y+4	; 0x04
    2e30:	3d 81       	ldd	r19, Y+5	; 0x05
    2e32:	22 30       	cpi	r18, 0x02	; 2
    2e34:	31 05       	cpc	r19, r1
    2e36:	2c f4       	brge	.+10     	; 0x2e42 <LCD_moveCursor+0x3a>
    2e38:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	61 f0       	breq	.+24     	; 0x2e58 <LCD_moveCursor+0x50>
    2e40:	19 c0       	rjmp	.+50     	; 0x2e74 <LCD_moveCursor+0x6c>
    2e42:	2c 81       	ldd	r18, Y+4	; 0x04
    2e44:	3d 81       	ldd	r19, Y+5	; 0x05
    2e46:	22 30       	cpi	r18, 0x02	; 2
    2e48:	31 05       	cpc	r19, r1
    2e4a:	69 f0       	breq	.+26     	; 0x2e66 <LCD_moveCursor+0x5e>
    2e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e50:	83 30       	cpi	r24, 0x03	; 3
    2e52:	91 05       	cpc	r25, r1
    2e54:	61 f0       	breq	.+24     	; 0x2e6e <LCD_moveCursor+0x66>
    2e56:	0e c0       	rjmp	.+28     	; 0x2e74 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2e58:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5a:	89 83       	std	Y+1, r24	; 0x01
    2e5c:	0b c0       	rjmp	.+22     	; 0x2e74 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e60:	80 5c       	subi	r24, 0xC0	; 192
    2e62:	89 83       	std	Y+1, r24	; 0x01
    2e64:	07 c0       	rjmp	.+14     	; 0x2e74 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	80 5f       	subi	r24, 0xF0	; 240
    2e6a:	89 83       	std	Y+1, r24	; 0x01
    2e6c:	03 c0       	rjmp	.+6      	; 0x2e74 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e70:	80 5b       	subi	r24, 0xB0	; 176
    2e72:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	80 68       	ori	r24, 0x80	; 128
    2e78:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_sendCommand>
}
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2e8c:	df 93       	push	r29
    2e8e:	cf 93       	push	r28
    2e90:	00 d0       	rcall	.+0      	; 0x2e92 <LCD_displayStringRowColumn+0x6>
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <LCD_displayStringRowColumn+0x8>
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    2e98:	89 83       	std	Y+1, r24	; 0x01
    2e9a:	6a 83       	std	Y+2, r22	; 0x02
    2e9c:	5c 83       	std	Y+4, r21	; 0x04
    2e9e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	6a 81       	ldd	r22, Y+2	; 0x02
    2ea4:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2eac:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayString>
}
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	cf 91       	pop	r28
    2eba:	df 91       	pop	r29
    2ebc:	08 95       	ret

00002ebe <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2ebe:	df 93       	push	r29
    2ec0:	cf 93       	push	r28
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    2ec6:	62 97       	sbiw	r28, 0x12	; 18
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	f8 94       	cli
    2ecc:	de bf       	out	0x3e, r29	; 62
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	cd bf       	out	0x3d, r28	; 61
    2ed2:	9a 8b       	std	Y+18, r25	; 0x12
    2ed4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2ed6:	89 89       	ldd	r24, Y+17	; 0x11
    2ed8:	9a 89       	ldd	r25, Y+18	; 0x12
    2eda:	9e 01       	movw	r18, r28
    2edc:	2f 5f       	subi	r18, 0xFF	; 255
    2ede:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee0:	b9 01       	movw	r22, r18
    2ee2:	4a e0       	ldi	r20, 0x0A	; 10
    2ee4:	50 e0       	ldi	r21, 0x00	; 0
    2ee6:	0e 94 07 19 	call	0x320e	; 0x320e <itoa>
   LCD_displayString(buff); /* Display the string */
    2eea:	ce 01       	movw	r24, r28
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_displayString>
}
    2ef2:	62 96       	adiw	r28, 0x12	; 18
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	de bf       	out	0x3e, r29	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	cd bf       	out	0x3d, r28	; 61
    2efe:	cf 91       	pop	r28
    2f00:	df 91       	pop	r29
    2f02:	08 95       	ret

00002f04 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2f04:	df 93       	push	r29
    2f06:	cf 93       	push	r28
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_sendCommand>
}
    2f12:	cf 91       	pop	r28
    2f14:	df 91       	pop	r29
    2f16:	08 95       	ret

00002f18 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_Config *Config_Ptr)
{
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	00 d0       	rcall	.+0      	; 0x2f1e <UART_init+0x6>
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <UART_init+0x8>
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	9c 83       	std	Y+4, r25	; 0x04
    2f26:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2f28:	1a 82       	std	Y+2, r1	; 0x02
    2f2a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2f2c:	eb e2       	ldi	r30, 0x2B	; 43
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	82 e0       	ldi	r24, 0x02	; 2
    2f32:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 according to the configuration structure
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2f34:	ea e2       	ldi	r30, 0x2A	; 42
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	88 e1       	ldi	r24, 0x18	; 24
    2f3a:	80 83       	st	Z, r24
	UCSRB= (UCSRB&0xFB)| ((Config_Ptr->frame)&0b100);
    2f3c:	aa e2       	ldi	r26, 0x2A	; 42
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	ea e2       	ldi	r30, 0x2A	; 42
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	98 2f       	mov	r25, r24
    2f48:	9b 7f       	andi	r25, 0xFB	; 251
    2f4a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f4c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f4e:	82 81       	ldd	r24, Z+2	; 0x02
    2f50:	84 70       	andi	r24, 0x04	; 4
    2f52:	89 2b       	or	r24, r25
    2f54:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2f56:	e0 e4       	ldi	r30, 0x40	; 64
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	80 e8       	ldi	r24, 0x80	; 128
    2f5c:	80 83       	st	Z, r24
	UCSRC= (UCSRC&0xCF) | ((Config_Ptr->parity)<<4);
    2f5e:	a0 e4       	ldi	r26, 0x40	; 64
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	e0 e4       	ldi	r30, 0x40	; 64
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	28 2f       	mov	r18, r24
    2f6a:	2f 7c       	andi	r18, 0xCF	; 207
    2f6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f70:	80 81       	ld	r24, Z
    2f72:	88 2f       	mov	r24, r24
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	82 95       	swap	r24
    2f78:	92 95       	swap	r25
    2f7a:	90 7f       	andi	r25, 0xF0	; 240
    2f7c:	98 27       	eor	r25, r24
    2f7e:	80 7f       	andi	r24, 0xF0	; 240
    2f80:	98 27       	eor	r25, r24
    2f82:	82 2b       	or	r24, r18
    2f84:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xF7) | ((Config_Ptr->stop_bit)<<3);
    2f86:	a0 e4       	ldi	r26, 0x40	; 64
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e0 e4       	ldi	r30, 0x40	; 64
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	28 2f       	mov	r18, r24
    2f92:	27 7f       	andi	r18, 0xF7	; 247
    2f94:	eb 81       	ldd	r30, Y+3	; 0x03
    2f96:	fc 81       	ldd	r31, Y+4	; 0x04
    2f98:	81 81       	ldd	r24, Z+1	; 0x01
    2f9a:	88 2f       	mov	r24, r24
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	88 0f       	add	r24, r24
    2fa0:	99 1f       	adc	r25, r25
    2fa2:	88 0f       	add	r24, r24
    2fa4:	99 1f       	adc	r25, r25
    2fa6:	88 0f       	add	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	82 2b       	or	r24, r18
    2fac:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xF9) | (((Config_Ptr->frame)&0x011)<<1);
    2fae:	a0 e4       	ldi	r26, 0x40	; 64
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	e0 e4       	ldi	r30, 0x40	; 64
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	28 2f       	mov	r18, r24
    2fba:	29 7f       	andi	r18, 0xF9	; 249
    2fbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc0:	82 81       	ldd	r24, Z+2	; 0x02
    2fc2:	88 2f       	mov	r24, r24
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	81 71       	andi	r24, 0x11	; 17
    2fc8:	90 70       	andi	r25, 0x00	; 0
    2fca:	88 0f       	add	r24, r24
    2fcc:	99 1f       	adc	r25, r25
    2fce:	82 2b       	or	r24, r18
    2fd0:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2fd2:	eb 81       	ldd	r30, Y+3	; 0x03
    2fd4:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd6:	83 81       	ldd	r24, Z+3	; 0x03
    2fd8:	94 81       	ldd	r25, Z+4	; 0x04
    2fda:	a5 81       	ldd	r26, Z+5	; 0x05
    2fdc:	b6 81       	ldd	r27, Z+6	; 0x06
    2fde:	88 0f       	add	r24, r24
    2fe0:	99 1f       	adc	r25, r25
    2fe2:	aa 1f       	adc	r26, r26
    2fe4:	bb 1f       	adc	r27, r27
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	aa 1f       	adc	r26, r26
    2fec:	bb 1f       	adc	r27, r27
    2fee:	88 0f       	add	r24, r24
    2ff0:	99 1f       	adc	r25, r25
    2ff2:	aa 1f       	adc	r26, r26
    2ff4:	bb 1f       	adc	r27, r27
    2ff6:	9c 01       	movw	r18, r24
    2ff8:	ad 01       	movw	r20, r26
    2ffa:	80 e4       	ldi	r24, 0x40	; 64
    2ffc:	92 e4       	ldi	r25, 0x42	; 66
    2ffe:	af e0       	ldi	r26, 0x0F	; 15
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	bc 01       	movw	r22, r24
    3004:	cd 01       	movw	r24, r26
    3006:	0e 94 ae 18 	call	0x315c	; 0x315c <__udivmodsi4>
    300a:	da 01       	movw	r26, r20
    300c:	c9 01       	movw	r24, r18
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	9a 83       	std	Y+2, r25	; 0x02
    3012:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3014:	e0 e4       	ldi	r30, 0x40	; 64
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	9a 81       	ldd	r25, Y+2	; 0x02
    301c:	89 2f       	mov	r24, r25
    301e:	99 27       	eor	r25, r25
    3020:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3022:	e9 e2       	ldi	r30, 0x29	; 41
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	80 83       	st	Z, r24
}
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	08 95       	ret

00003038 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3038:	df 93       	push	r29
    303a:	cf 93       	push	r28
    303c:	0f 92       	push	r0
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3044:	eb e2       	ldi	r30, 0x2B	; 43
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	88 2f       	mov	r24, r24
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	80 72       	andi	r24, 0x20	; 32
    3050:	90 70       	andi	r25, 0x00	; 0
    3052:	00 97       	sbiw	r24, 0x00	; 0
    3054:	b9 f3       	breq	.-18     	; 0x3044 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3056:	ec e2       	ldi	r30, 0x2C	; 44
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    305e:	0f 90       	pop	r0
    3060:	cf 91       	pop	r28
    3062:	df 91       	pop	r29
    3064:	08 95       	ret

00003066 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    306e:	eb e2       	ldi	r30, 0x2B	; 43
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	88 23       	and	r24, r24
    3076:	dc f7       	brge	.-10     	; 0x306e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3078:	ec e2       	ldi	r30, 0x2C	; 44
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	80 81       	ld	r24, Z
}
    307e:	cf 91       	pop	r28
    3080:	df 91       	pop	r29
    3082:	08 95       	ret

00003084 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3084:	df 93       	push	r29
    3086:	cf 93       	push	r28
    3088:	00 d0       	rcall	.+0      	; 0x308a <UART_sendString+0x6>
    308a:	0f 92       	push	r0
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    3090:	9b 83       	std	Y+3, r25	; 0x03
    3092:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3094:	19 82       	std	Y+1, r1	; 0x01
    3096:	0e c0       	rjmp	.+28     	; 0x30b4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	28 2f       	mov	r18, r24
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	8a 81       	ldd	r24, Y+2	; 0x02
    30a0:	9b 81       	ldd	r25, Y+3	; 0x03
    30a2:	fc 01       	movw	r30, r24
    30a4:	e2 0f       	add	r30, r18
    30a6:	f3 1f       	adc	r31, r19
    30a8:	80 81       	ld	r24, Z
    30aa:	0e 94 1c 18 	call	0x3038	; 0x3038 <UART_sendByte>
		i++;
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	8f 5f       	subi	r24, 0xFF	; 255
    30b2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    30b4:	89 81       	ldd	r24, Y+1	; 0x01
    30b6:	28 2f       	mov	r18, r24
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	8a 81       	ldd	r24, Y+2	; 0x02
    30bc:	9b 81       	ldd	r25, Y+3	; 0x03
    30be:	fc 01       	movw	r30, r24
    30c0:	e2 0f       	add	r30, r18
    30c2:	f3 1f       	adc	r31, r19
    30c4:	80 81       	ld	r24, Z
    30c6:	88 23       	and	r24, r24
    30c8:	39 f7       	brne	.-50     	; 0x3098 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    30ca:	0f 90       	pop	r0
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	cf 91       	pop	r28
    30d2:	df 91       	pop	r29
    30d4:	08 95       	ret

000030d6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    30d6:	0f 93       	push	r16
    30d8:	1f 93       	push	r17
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	00 d0       	rcall	.+0      	; 0x30e0 <UART_receiveString+0xa>
    30e0:	0f 92       	push	r0
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	9b 83       	std	Y+3, r25	; 0x03
    30e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30ea:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	28 2f       	mov	r18, r24
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	9b 81       	ldd	r25, Y+3	; 0x03
    30f6:	8c 01       	movw	r16, r24
    30f8:	02 0f       	add	r16, r18
    30fa:	13 1f       	adc	r17, r19
    30fc:	0e 94 33 18 	call	0x3066	; 0x3066 <UART_recieveByte>
    3100:	f8 01       	movw	r30, r16
    3102:	80 83       	st	Z, r24
    3104:	0f c0       	rjmp	.+30     	; 0x3124 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	8f 5f       	subi	r24, 0xFF	; 255
    310a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	8a 81       	ldd	r24, Y+2	; 0x02
    3114:	9b 81       	ldd	r25, Y+3	; 0x03
    3116:	8c 01       	movw	r16, r24
    3118:	02 0f       	add	r16, r18
    311a:	13 1f       	adc	r17, r19
    311c:	0e 94 33 18 	call	0x3066	; 0x3066 <UART_recieveByte>
    3120:	f8 01       	movw	r30, r16
    3122:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	28 2f       	mov	r18, r24
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	9b 81       	ldd	r25, Y+3	; 0x03
    312e:	fc 01       	movw	r30, r24
    3130:	e2 0f       	add	r30, r18
    3132:	f3 1f       	adc	r31, r19
    3134:	80 81       	ld	r24, Z
    3136:	83 32       	cpi	r24, 0x23	; 35
    3138:	31 f7       	brne	.-52     	; 0x3106 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	28 2f       	mov	r18, r24
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	8a 81       	ldd	r24, Y+2	; 0x02
    3142:	9b 81       	ldd	r25, Y+3	; 0x03
    3144:	fc 01       	movw	r30, r24
    3146:	e2 0f       	add	r30, r18
    3148:	f3 1f       	adc	r31, r19
    314a:	10 82       	st	Z, r1
}
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	cf 91       	pop	r28
    3154:	df 91       	pop	r29
    3156:	1f 91       	pop	r17
    3158:	0f 91       	pop	r16
    315a:	08 95       	ret

0000315c <__udivmodsi4>:
    315c:	a1 e2       	ldi	r26, 0x21	; 33
    315e:	1a 2e       	mov	r1, r26
    3160:	aa 1b       	sub	r26, r26
    3162:	bb 1b       	sub	r27, r27
    3164:	fd 01       	movw	r30, r26
    3166:	0d c0       	rjmp	.+26     	; 0x3182 <__udivmodsi4_ep>

00003168 <__udivmodsi4_loop>:
    3168:	aa 1f       	adc	r26, r26
    316a:	bb 1f       	adc	r27, r27
    316c:	ee 1f       	adc	r30, r30
    316e:	ff 1f       	adc	r31, r31
    3170:	a2 17       	cp	r26, r18
    3172:	b3 07       	cpc	r27, r19
    3174:	e4 07       	cpc	r30, r20
    3176:	f5 07       	cpc	r31, r21
    3178:	20 f0       	brcs	.+8      	; 0x3182 <__udivmodsi4_ep>
    317a:	a2 1b       	sub	r26, r18
    317c:	b3 0b       	sbc	r27, r19
    317e:	e4 0b       	sbc	r30, r20
    3180:	f5 0b       	sbc	r31, r21

00003182 <__udivmodsi4_ep>:
    3182:	66 1f       	adc	r22, r22
    3184:	77 1f       	adc	r23, r23
    3186:	88 1f       	adc	r24, r24
    3188:	99 1f       	adc	r25, r25
    318a:	1a 94       	dec	r1
    318c:	69 f7       	brne	.-38     	; 0x3168 <__udivmodsi4_loop>
    318e:	60 95       	com	r22
    3190:	70 95       	com	r23
    3192:	80 95       	com	r24
    3194:	90 95       	com	r25
    3196:	9b 01       	movw	r18, r22
    3198:	ac 01       	movw	r20, r24
    319a:	bd 01       	movw	r22, r26
    319c:	cf 01       	movw	r24, r30
    319e:	08 95       	ret

000031a0 <__prologue_saves__>:
    31a0:	2f 92       	push	r2
    31a2:	3f 92       	push	r3
    31a4:	4f 92       	push	r4
    31a6:	5f 92       	push	r5
    31a8:	6f 92       	push	r6
    31aa:	7f 92       	push	r7
    31ac:	8f 92       	push	r8
    31ae:	9f 92       	push	r9
    31b0:	af 92       	push	r10
    31b2:	bf 92       	push	r11
    31b4:	cf 92       	push	r12
    31b6:	df 92       	push	r13
    31b8:	ef 92       	push	r14
    31ba:	ff 92       	push	r15
    31bc:	0f 93       	push	r16
    31be:	1f 93       	push	r17
    31c0:	cf 93       	push	r28
    31c2:	df 93       	push	r29
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	ca 1b       	sub	r28, r26
    31ca:	db 0b       	sbc	r29, r27
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	09 94       	ijmp

000031d8 <__epilogue_restores__>:
    31d8:	2a 88       	ldd	r2, Y+18	; 0x12
    31da:	39 88       	ldd	r3, Y+17	; 0x11
    31dc:	48 88       	ldd	r4, Y+16	; 0x10
    31de:	5f 84       	ldd	r5, Y+15	; 0x0f
    31e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    31e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    31e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    31e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    31e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    31ea:	b9 84       	ldd	r11, Y+9	; 0x09
    31ec:	c8 84       	ldd	r12, Y+8	; 0x08
    31ee:	df 80       	ldd	r13, Y+7	; 0x07
    31f0:	ee 80       	ldd	r14, Y+6	; 0x06
    31f2:	fd 80       	ldd	r15, Y+5	; 0x05
    31f4:	0c 81       	ldd	r16, Y+4	; 0x04
    31f6:	1b 81       	ldd	r17, Y+3	; 0x03
    31f8:	aa 81       	ldd	r26, Y+2	; 0x02
    31fa:	b9 81       	ldd	r27, Y+1	; 0x01
    31fc:	ce 0f       	add	r28, r30
    31fe:	d1 1d       	adc	r29, r1
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	ed 01       	movw	r28, r26
    320c:	08 95       	ret

0000320e <itoa>:
    320e:	fb 01       	movw	r30, r22
    3210:	9f 01       	movw	r18, r30
    3212:	e8 94       	clt
    3214:	42 30       	cpi	r20, 0x02	; 2
    3216:	c4 f0       	brlt	.+48     	; 0x3248 <itoa+0x3a>
    3218:	45 32       	cpi	r20, 0x25	; 37
    321a:	b4 f4       	brge	.+44     	; 0x3248 <itoa+0x3a>
    321c:	4a 30       	cpi	r20, 0x0A	; 10
    321e:	29 f4       	brne	.+10     	; 0x322a <itoa+0x1c>
    3220:	97 fb       	bst	r25, 7
    3222:	1e f4       	brtc	.+6      	; 0x322a <itoa+0x1c>
    3224:	90 95       	com	r25
    3226:	81 95       	neg	r24
    3228:	9f 4f       	sbci	r25, 0xFF	; 255
    322a:	64 2f       	mov	r22, r20
    322c:	77 27       	eor	r23, r23
    322e:	0e 94 38 19 	call	0x3270	; 0x3270 <__udivmodhi4>
    3232:	80 5d       	subi	r24, 0xD0	; 208
    3234:	8a 33       	cpi	r24, 0x3A	; 58
    3236:	0c f0       	brlt	.+2      	; 0x323a <itoa+0x2c>
    3238:	89 5d       	subi	r24, 0xD9	; 217
    323a:	81 93       	st	Z+, r24
    323c:	cb 01       	movw	r24, r22
    323e:	00 97       	sbiw	r24, 0x00	; 0
    3240:	a1 f7       	brne	.-24     	; 0x322a <itoa+0x1c>
    3242:	16 f4       	brtc	.+4      	; 0x3248 <itoa+0x3a>
    3244:	5d e2       	ldi	r21, 0x2D	; 45
    3246:	51 93       	st	Z+, r21
    3248:	10 82       	st	Z, r1
    324a:	c9 01       	movw	r24, r18
    324c:	0c 94 28 19 	jmp	0x3250	; 0x3250 <strrev>

00003250 <strrev>:
    3250:	dc 01       	movw	r26, r24
    3252:	fc 01       	movw	r30, r24
    3254:	67 2f       	mov	r22, r23
    3256:	71 91       	ld	r23, Z+
    3258:	77 23       	and	r23, r23
    325a:	e1 f7       	brne	.-8      	; 0x3254 <strrev+0x4>
    325c:	32 97       	sbiw	r30, 0x02	; 2
    325e:	04 c0       	rjmp	.+8      	; 0x3268 <strrev+0x18>
    3260:	7c 91       	ld	r23, X
    3262:	6d 93       	st	X+, r22
    3264:	70 83       	st	Z, r23
    3266:	62 91       	ld	r22, -Z
    3268:	ae 17       	cp	r26, r30
    326a:	bf 07       	cpc	r27, r31
    326c:	c8 f3       	brcs	.-14     	; 0x3260 <strrev+0x10>
    326e:	08 95       	ret

00003270 <__udivmodhi4>:
    3270:	aa 1b       	sub	r26, r26
    3272:	bb 1b       	sub	r27, r27
    3274:	51 e1       	ldi	r21, 0x11	; 17
    3276:	07 c0       	rjmp	.+14     	; 0x3286 <__udivmodhi4_ep>

00003278 <__udivmodhi4_loop>:
    3278:	aa 1f       	adc	r26, r26
    327a:	bb 1f       	adc	r27, r27
    327c:	a6 17       	cp	r26, r22
    327e:	b7 07       	cpc	r27, r23
    3280:	10 f0       	brcs	.+4      	; 0x3286 <__udivmodhi4_ep>
    3282:	a6 1b       	sub	r26, r22
    3284:	b7 0b       	sbc	r27, r23

00003286 <__udivmodhi4_ep>:
    3286:	88 1f       	adc	r24, r24
    3288:	99 1f       	adc	r25, r25
    328a:	5a 95       	dec	r21
    328c:	a9 f7       	brne	.-22     	; 0x3278 <__udivmodhi4_loop>
    328e:	80 95       	com	r24
    3290:	90 95       	com	r25
    3292:	bc 01       	movw	r22, r24
    3294:	cd 01       	movw	r24, r26
    3296:	08 95       	ret

00003298 <_exit>:
    3298:	f8 94       	cli

0000329a <__stop_program>:
    329a:	ff cf       	rjmp	.-2      	; 0x329a <__stop_program>
